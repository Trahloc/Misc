#!/usr/bin/env python3
"""
Standalone debug version of the civit CLI that can be run directly.
This provides the new functionality for debugging.

Usage:
    ./civit-debug URL
"""
import os
import sys
import logging
import argparse
from pathlib import Path

# Make sure we can import from the src directory
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

# Import our modules - use the correct package paths
from src.civit.download_handler import download_file
from src.civit.filename_generator import (
    generate_custom_filename,
    should_use_custom_filename,
)

# Set up logging
logger = logging.getLogger(__name__)


def setup_logging(verbose=False, debug=True):
    """
    Configure debug logging
    """
    # Always use debug level for this script
    log_level = logging.DEBUG
    log_format = "%(asctime)s - %(name)s - %(levelname)s - [%(filename)s:%(lineno)d] - %(message)s"

    # Set up logging
    logging.basicConfig(
        level=log_level, format=log_format, handlers=[logging.StreamHandler()]
    )

    logger.debug("Debug logging enabled - showing detailed information")


def parse_args():
    """Parse command line arguments with debug enabled by default"""
    parser = argparse.ArgumentParser(description="Debug version of civit downloader")

    parser.add_argument("url", help="URL of the model to download")

    parser.add_argument(
        "-o",
        "--output-dir",
        help="Directory to save the downloaded file",
        default=os.getcwd(),
    )

    parser.add_argument(
        "--no-custom-naming",
        action="store_false",
        dest="custom_naming",
        help="Disable custom naming pattern",
    )

    parser.set_defaults(custom_naming=True, debug=True, verbose=True)

    return parser.parse_args()


def main():
    """Main entry point for the debug tool"""
    try:
        args = parse_args()
        setup_logging(debug=True)

        logger.debug(f"Arguments: {vars(args)}")
        logger.debug(f"URL: {args.url}")
        logger.debug(f"Output directory: {args.output_dir}")
        logger.debug(f"Custom naming: {args.custom_naming}")

        # Download the file
        success = download_file(args.url, args.output_dir, args)

        return 0 if success else 1

    except Exception as e:
        logger.error(f"Error: {e}")
        logger.exception("Detailed traceback:")
        return 1


if __name__ == "__main__":
    sys.exit(main())
