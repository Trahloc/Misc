 HfApi Client
Below is the documentation for the HfApi class, which serves as a Python
wrapper for the Hugging Face Hubâs API.
All methods from the HfApi are also accessible from the packageâs root
directly. Both approaches are detailed below.
Using the root method is more straightforward but the HfApi class gives you
more flexibility. In particular, you can pass a token that will be reused in
all HTTP calls. This is different than huggingface-cli login or login() as the
token is not persisted on the machine. It is also possible to provide a
different endpoint or configure a custom user-agent.
Copied
from huggingface_hub import HfApi, list_models

# Use root method
models = list_models()

# Or configure a HfApi client
hf_api = HfApi(
    endpoint="https://huggingface.co", # Can be a Private Hub endpoint.
    token="hf_xxx", # Token is not persisted on the machine.
)
models = hf_api.list_models()
 HfApi
**** class huggingface_hub.HfApi ****
 <_source_>
( endpoint: Optional[str] = None token: Union[str, bool, None] = None
library_name: Optional[str] = None library_version: Optional[str] = None
user_agent: Union[Dict, str, None] = None headers: Optional[Dict[str, str]] =
None  )
Parameters
    *  endpoint (str, optional) &#x2014; Endpoint of the Hub. Defaults to
      https://huggingface.co.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
    *  library_name (str, optional) &#x2014; The name of the library that is
      making the HTTP request. Will be added to the user-agent header. Example:
      "transformers".
    *  library_version (str, optional) &#x2014; The version of the library that
      is making the HTTP request. Will be added to the user-agent header.
      Example: "4.24.0".
    *  user_agent (str, dict, optional) &#x2014; The user agent info in the
      form of a dictionary or a single string. It will be completed with
      information about the installed packages.
    *  headers (dict, optional) &#x2014; Additional headers to be sent with
      each request. Example: {"X-My-Header": "value"}. Headers passed here are
      taking precedence over the default headers.
Client to interact with the Hugging Face Hub via HTTP.
The client is initialized with some high-level settings used in all requests
made to the Hub (HF endpoint, authentication, user agentsâ¦). Using the HfApi
client is preferred but not mandatory as all of its public methods are exposed
directly at the root of huggingface_hub.
*** accept_access_request ***
 <_source_>
( repo_id: str user: str repo_type: Optional[str] = None token: Union[bool,
str, None] = None  )
Parameters
    *  repo_id (str) &#x2014; The id of the repo to accept access request for.
    *  user (str) &#x2014; The username of the user which access request should
      be accepted.
    *  repo_type (str, optional) &#x2014; The type of the repo to accept access
      request for. Must be one of model, dataset or space. Defaults to model.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Raises
HTTPError
    * HTTPError â HTTP 400 if the repo is not gated.
    * HTTPError â HTTP 403 if you only have read-only access to the repo.
      This can be the case if you donât have write or admin role in the
      organization the repo belongs to or if you passed a read token.
    * HTTPError â HTTP 404 if the user does not exist on the Hub.
    * HTTPError â HTTP 404 if the user access request cannot be found.
    * HTTPError â HTTP 404 if the user access request is already in the
      accepted list.
Accept an access request from a user for a given gated repo.
Once the request is accepted, the user will be able to download any file of the
repo and access the community tab. If the approval mode is automatic, you
donât have to accept requests manually. An accepted request can be cancelled
or rejected at any time using cancel_access_request() and reject_access_request
().
For more info about gated repos, see https://huggingface.co/docs/hub/models-
gated.
*** add_collection_item ***
 <_source_>
( collection_slug: str item_id: str item_type: CollectionItemType_T note:
Optional[str] = None exists_ok: bool = False token: Union[bool, str, None] =
None  )
Parameters
    *  collection_slug (str) &#x2014; Slug of the collection to update.
      Example: "TheBloke/recent-models-64f9a55bb3115b4f513ec026".
    *  item_id (str) &#x2014; ID of the item to add to the collection. It can
      be the ID of a repo on the Hub (e.g. "facebook/bart-large-mnli") or a
      paper id (e.g. "2307.09288").
    *  item_type (str) &#x2014; Type of the item to add. Can be one of "model",
      "dataset", "space" or "paper".
    *  note (str, optional) &#x2014; A note to attach to the item in the
      collection. The maximum size for a note is 500 characters.
    *  exists_ok (bool, optional) &#x2014; If True, do not raise an error if
      item already exists.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Raises
HTTPError
    * HTTPError â HTTP 403 if you only have read-only access to the repo.
      This can be the case if you donât have write or admin role in the
      organization the repo belongs to or if you passed a read token.
    * HTTPError â HTTP 404 if the item you try to add to the collection does
      not exist on the Hub.
    * HTTPError â HTTP 409 if the item you try to add to the collection is
      already in the collection (and exists_ok=False)
Add an item to a collection on the Hub.
Returns: Collection
Example:
Copied
>>> from huggingface_hub import add_collection_item
>>> collection = add_collection_item(
...     collection_slug="davanstrien/climate-64f99dc2a5067f6b65531bab",
...     item_id="pierre-loic/climate-news-articles",
...     item_type="dataset"
... )
>>> collection.items[-1].item_id
"pierre-loic/climate-news-articles"
# ^item got added to the collection on last position

# Add item with a note
>>> add_collection_item(
...     collection_slug="davanstrien/climate-64f99dc2a5067f6b65531bab",
...     item_id="datasets/climate_fever",
...     item_type="dataset"
...     note="This dataset adopts the FEVER methodology that consists of 1,535
real-world claims regarding climate-change collected on the internet."
... )
(...)
*** add_space_secret ***
 <_source_>
( repo_id: str key: str value: str description: Optional[str] = None token:
Union[bool, str, None] = None  )
Parameters
    *  repo_id (str) &#x2014; ID of the repo to update. Example: "bigcode/in-
      the-stack".
    *  key (str) &#x2014; Secret key. Example: "GITHUB_API_KEY"
    *  value (str) &#x2014; Secret value. Example: "your_github_api_key".
    *  description (str, optional) &#x2014; Secret description. Example:
      "Github API key to access the Github API".
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Adds or updates a secret in a Space.
Secrets allow to set secret keys or tokens to a Space without hardcoding them.
For more details, see https://huggingface.co/docs/hub/spaces-overview#managing-
secrets.
*** add_space_variable ***
 <_source_>
( repo_id: str key: str value: str description: Optional[str] = None token:
Union[bool, str, None] = None  )
Parameters
    *  repo_id (str) &#x2014; ID of the repo to update. Example: "bigcode/in-
      the-stack".
    *  key (str) &#x2014; Variable key. Example: "MODEL_REPO_ID"
    *  value (str) &#x2014; Variable value. Example: "the_model_repo_id".
    *  description (str) &#x2014; Description of the variable. Example: "Model
      Repo ID of the implemented model".
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Adds or updates a variable in a Space.
Variables allow to set environment variables to a Space without hardcoding
them. For more details, see https://huggingface.co/docs/hub/spaces-
overview#managing-secrets-and-environment-variables
*** auth_check ***
 <_source_>
( repo_id: str repo_type: Optional[str] = None token: Union[bool, str, None] =
None  )
Parameters
    *  repo_id (str) &#x2014; The repository to check for access. Format should
      be "user/repo_name". Example: "user/my-cool-model".
    *  repo_type (str, optional) &#x2014; The type of the repository. Should be
      one of "model", "dataset", or "space". If not specified, the default is
      "model".
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token. If not provided, the locally saved token will be used, which is
      the recommended authentication method. Set to False to disable
      authentication. Refer to: https://huggingface.co/docs/huggingface_hub/
      quick-start#authentication.
Raises
RepositoryNotFoundError or GatedRepoError
    * RepositoryNotFoundError â Raised if the repository does not exist, is
      private, or the user does not have access. This can occur if the repo_id
      or repo_type is incorrect or if the repository is private but the user is
      not authenticated.
    * GatedRepoError â Raised if the repository exists but is gated and the
      user is not authorized to access it.
Check if the provided user token has access to a specific repository on the
Hugging Face Hub.
This method verifies whether the user, authenticated via the provided token,
has access to the specified repository. If the repository is not found or if
the user lacks the required permissions to access it, the method raises an
appropriate exception.
Example:
Check if the user has access to a repository:
Copied
>>> from huggingface_hub import auth_check
>>> from huggingface_hub.utils import GatedRepoError, RepositoryNotFoundError

try:
    auth_check("user/my-cool-model")
except GatedRepoError:
    # Handle gated repository error
    print("You do not have permission to access this gated repository.")
except RepositoryNotFoundError:
    # Handle repository not found error
    print("The repository was not found or you do not have access.")
In this example:
    * If the user has access, the method completes successfully.
    * If the repository is gated or does not exist, appropriate exceptions are
      raised, allowing the user to handle them accordingly.
*** cancel_access_request ***
 <_source_>
( repo_id: str user: str repo_type: Optional[str] = None token: Union[bool,
str, None] = None  )
Parameters
    *  repo_id (str) &#x2014; The id of the repo to cancel access request for.
    *  user (str) &#x2014; The username of the user which access request should
      be cancelled.
    *  repo_type (str, optional) &#x2014; The type of the repo to cancel access
      request for. Must be one of model, dataset or space. Defaults to model.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Raises
HTTPError
    * HTTPError â HTTP 400 if the repo is not gated.
    * HTTPError â HTTP 403 if you only have read-only access to the repo.
      This can be the case if you donât have write or admin role in the
      organization the repo belongs to or if you passed a read token.
    * HTTPError â HTTP 404 if the user does not exist on the Hub.
    * HTTPError â HTTP 404 if the user access request cannot be found.
    * HTTPError â HTTP 404 if the user access request is already in the
      pending list.
Cancel an access request from a user for a given gated repo.
A cancelled request will go back to the pending list and the user will lose
access to the repo.
For more info about gated repos, see https://huggingface.co/docs/hub/models-
gated.
*** change_discussion_status ***
 <_source_>
( repo_id: str discussion_num: int new_status: Literal['open', 'closed'] token:
Union[bool, str, None] = None comment: Optional[str] = None repo_type: Optional
[str] = None  ) â
DiscussionStatusChange
Parameters
    *  repo_id (str) &#x2014; A namespace (user or an organization) and a repo
      name separated by a /.
    *  discussion_num (int) &#x2014; The number of the Discussion or Pull
      Request . Must be a strictly positive integer.
    *  new_status (str) &#x2014; The new status for the discussion, either
      "open" or "closed".
    *  comment (str, optional) &#x2014; An optional comment to post with the
      status change.
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if
      uploading to a dataset or space, None or "model" if uploading to a model.
      Default is None.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
DiscussionStatusChange
the status change event
Closes or re-opens a Discussion or Pull Request.
Examples:
Copied
>>> new_title = "New title, fixing a typo"
>>> HfApi().rename_discussion(
...     repo_id="username/repo_name",
...     discussion_num=34
...     new_title=new_title
... )
# DiscussionStatusChange(id=&#x27;deadbeef0000000&#x27;, type=&#x27;status-
change&#x27;, ...)
Raises the following errors:
    * HTTPError if the HuggingFace API returned an error
    * ValueError if some parameter value is invalid
    * RepositoryNotFoundError If the repository to download from cannot be
      found. This may be because it doesnât exist, or because it is set to
      private and you do not have access.
*** comment_discussion ***
 <_source_>
( repo_id: str discussion_num: int comment: str token: Union[bool, str, None] =
None repo_type: Optional[str] = None  ) â
DiscussionComment
Parameters
    *  repo_id (str) &#x2014; A namespace (user or an organization) and a repo
      name separated by a /.
    *  discussion_num (int) &#x2014; The number of the Discussion or Pull
      Request . Must be a strictly positive integer.
    *  comment (str) &#x2014; The content of the comment to create. Comments
      support markdown formatting.
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if
      uploading to a dataset or space, None or "model" if uploading to a model.
      Default is None.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
DiscussionComment
the newly created comment
Creates a new comment on the given Discussion.
Examples:
Copied
>>> comment = """
... Hello @otheruser!
...
... # This is a title
...
... **This is bold**, *this is italic* and ~this is strikethrough~
... And [this](http://url) is a link
... """

>>> HfApi().comment_discussion(
...     repo_id="username/repo_name",
...     discussion_num=34
...     comment=comment
... )
# DiscussionComment(id=&#x27;deadbeef0000000&#x27;, type=&#x27;comment&#x27;,
...)
Raises the following errors:
    * HTTPError if the HuggingFace API returned an error
    * ValueError if some parameter value is invalid
    * RepositoryNotFoundError If the repository to download from cannot be
      found. This may be because it doesnât exist, or because it is set to
      private and you do not have access.
*** create_branch ***
 <_source_>
( repo_id: str branch: str revision: Optional[str] = None token: Union[bool,
str, None] = None repo_type: Optional[str] = None exist_ok: bool = False  )
Parameters
    *  repo_id (str) &#x2014; The repository in which the branch will be
      created. Example: "user/my-cool-model".
    *  branch (str) &#x2014; The name of the branch to create.
    *  revision (str, optional) &#x2014; The git revision to create the branch
      from. It can be a branch name or the OID/SHA of a commit, as a
      hexadecimal string. Defaults to the head of the "main" branch.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if
      creating a branch on a dataset or space, None or "model" if tagging a
      model. Default is None.
    *  exist_ok (bool, optional, defaults to False) &#x2014; If True, do not
      raise an error if branch already exists.
Raises
RepositoryNotFoundError or BadRequestError or HfHubHTTPError
    * RepositoryNotFoundError â If repository is not found (error 404): wrong
      repo_id/repo_type, private but not authenticated or repo does not exist.
    * BadRequestError â If invalid reference for a branch. Ex: refs/pr/5 or
      ârefs/foo/barâ.
    * HfHubHTTPError â If the branch already exists on the repo (error 409)
      and exist_ok is set to False.
Create a new branch for a repo on the Hub, starting from the specified revision
(defaults to main). To find a revision suiting your needs, you can use
list_repo_refs() or list_repo_commits().
*** create_collection ***
 <_source_>
( title: str namespace: Optional[str] = None description: Optional[str] = None
private: bool = False exists_ok: bool = False token: Union[bool, str, None] =
None  )
Parameters
    *  title (str) &#x2014; Title of the collection to create. Example: "Recent
      models".
    *  namespace (str, optional) &#x2014; Namespace of the collection to create
      (username or org). Will default to the owner name.
    *  description (str, optional) &#x2014; Description of the collection to
      create.
    *  private (bool, optional) &#x2014; Whether the collection should be
      private or not. Defaults to False (i.e. public collection).
    *  exists_ok (bool, optional) &#x2014; If True, do not raise an error if
      collection already exists.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Create a new Collection on the Hub.
Returns: Collection
Example:
Copied
>>> from huggingface_hub import create_collection
>>> collection = create_collection(
...     title="ICCV 2023",
...     description="Portfolio of models, papers and demos I presented at ICCV
2023",
... )
>>> collection.slug
"username/iccv-2023-64f9a55bb3115b4f513ec026"
*** create_commit ***
 <_source_>
( repo_id: str operations: Iterable[CommitOperation] commit_message: str
commit_description: Optional[str] = None token: Union[str, bool, None] = None
repo_type: Optional[str] = None revision: Optional[str] = None create_pr:
Optional[bool] = None num_threads: int = 5 parent_commit: Optional[str] = None
run_as_future: bool = False  ) â
CommitInfo or Future
Parameters
    *  repo_id (str) &#x2014; The repository in which the commit will be
      created, for example: "username/custom_transformers"
    *  operations (Iterable of CommitOperation()) &#x2014; An iterable of
      operations to include in the commit, either:
    * CommitOperationAdd to upload a file
    * CommitOperationDelete to delete a file
    * CommitOperationCopy to copy a file
Operation objects will be mutated to include information relative to the
upload. Do not reuse the same objects for multiple commits.
 commit_message (str) &#x2014; The summary (first line) of the commit that will
be created.
 commit_description (str, optional) &#x2014; The description of the commit that
will be created
 token (Union[bool, str, None], optional) &#x2014; A valid user access token
(string). Defaults to the locally saved token, which is the recommended method
for authentication (see https://huggingface.co/docs/huggingface_hub/quick-
start#authentication). To disable authentication, pass False.
 repo_type (str, optional) &#x2014; Set to "dataset" or "space" if uploading to
a dataset or space, None or "model" if uploading to a model. Default is None.
 revision (str, optional) &#x2014; The git revision to commit from. Defaults to
the head of the "main" branch.
 create_pr (boolean, optional) &#x2014; Whether or not to create a Pull Request
with that commit. Defaults to False. If revision is not set, PR is opened
against the "main" branch. If revision is set and is a branch, PR is opened
against this branch. If revision is set and is not a branch name (example: a
commit oid), an RevisionNotFoundError is returned by the server.
 num_threads (int, optional) &#x2014; Number of concurrent threads for
uploading files. Defaults to 5. Setting it to 2 means at most 2 files will be
uploaded concurrently.
 parent_commit (str, optional) &#x2014; The OID / SHA of the parent commit, as
a hexadecimal string. Shorthands (7 first characters) are also supported. If
specified and create_pr is False, the commit will fail if revision does not
point to parent_commit. If specified and create_pr is True, the pull request
will be created from parent_commit. Specifying parent_commit ensures the repo
has not changed before committing the changes, and can be especially useful if
the repo is updated / committed to concurrently.
 run_as_future (bool, optional) &#x2014; Whether or not to run this method in
the background. Background jobs are run sequentially without blocking the main
thread. Passing run_as_future=True will return a Future object. Defaults to
False.
Returns
CommitInfo or Future
Instance of CommitInfo containing information about the newly created commit
(commit hash, commit url, pr url, commit message,â¦). If run_as_future=True is
passed, returns a Future object which will contain the result when executed.
Raises
ValueError or RepositoryNotFoundError
    * ValueError â If commit message is empty.
    * ValueError â If parent commit is not a valid commit OID.
    * ValueError â If a README.md file with an invalid metadata section is
      committed. In this case, the commit will fail early, before trying to
      upload any file.
    * ValueError â If create_pr is True and revision is neither None nor
      "main".
    * RepositoryNotFoundError â If repository is not found (error 404): wrong
      repo_id/repo_type, private but not authenticated or repo does not exist.
Creates a commit in the given repo, deleting & uploading files as needed.
The input list of CommitOperation will be mutated during the commit process. Do
not reuse the same objects for multiple commits.
create_commit assumes that the repo already exists on the Hub. If you get a
Client error 404, please make sure you are authenticated and that repo_id and
repo_type are set correctly. If repo does not exist, create it first using
create_repo().
create_commit is limited to 25k LFS files and a 1GB payload for regular files.
*** create_discussion ***
 <_source_>
( repo_id: str title: str token: Union[bool, str, None] = None description:
Optional[str] = None repo_type: Optional[str] = None pull_request: bool = False
)
Parameters
    *  repo_id (str) &#x2014; A namespace (user or an organization) and a repo
      name separated by a /.
    *  title (str) &#x2014; The title of the discussion. It can be up to 200
      characters long, and must be at least 3 characters long. Leading and
      trailing whitespaces will be stripped.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
    *  description (str, optional) &#x2014; An optional description for the
      Pull Request. Defaults to "Discussion opened with the huggingface_hub
      Python library"
    *  pull_request (bool, optional) &#x2014; Whether to create a Pull Request
      or discussion. If True, creates a Pull Request. If False, creates a
      discussion. Defaults to False.
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if
      uploading to a dataset or space, None or "model" if uploading to a model.
      Default is None.
Creates a Discussion or Pull Request.
Pull Requests created programmatically will be in "draft" status.
Creating a Pull Request with changes can also be done at once with
HfApi.create_commit().
Returns: DiscussionWithDetails
Raises the following errors:
    * HTTPError if the HuggingFace API returned an error
    * ValueError if some parameter value is invalid
    * RepositoryNotFoundError If the repository to download from cannot be
      found. This may be because it doesnât exist, or because it is set to
      private and you do not have access.
*** create_inference_endpoint ***
 <_source_>
( name: str repository: str framework: str accelerator: str instance_size: str
instance_type: str region: str vendor: str account_id: Optional[str] = None
min_replica: int = 0 max_replica: int = 1 scale_to_zero_timeout: int = 15
revision: Optional[str] = None task: Optional[str] = None custom_image:
Optional[Dict] = None secrets: Optional[Dict[str, str]] = None type:
InferenceEndpointType = <InferenceEndpointType.PROTECTED: 'protected'>
namespace: Optional[str] = None token: Union[bool, str, None] = None  ) â
InferenceEndpoint
Parameters
    *  name (str) &#x2014; The unique name for the new Inference Endpoint.
    *  repository (str) &#x2014; The name of the model repository associated
      with the Inference Endpoint (e.g. "gpt2").
    *  framework (str) &#x2014; The machine learning framework used for the
      model (e.g. "custom").
    *  accelerator (str) &#x2014; The hardware accelerator to be used for
      inference (e.g. "cpu").
    *  instance_size (str) &#x2014; The size or type of the instance to be used
      for hosting the model (e.g. "x4").
    *  instance_type (str) &#x2014; The cloud instance type where the Inference
      Endpoint will be deployed (e.g. "intel-icl").
    *  region (str) &#x2014; The cloud region in which the Inference Endpoint
      will be created (e.g. "us-east-1").
    *  vendor (str) &#x2014; The cloud provider or vendor where the Inference
      Endpoint will be hosted (e.g. "aws").
    *  account_id (str, optional) &#x2014; The account ID used to link a VPC to
      a private Inference Endpoint (if applicable).
    *  min_replica (int, optional) &#x2014; The minimum number of replicas
      (instances) to keep running for the Inference Endpoint. Defaults to 0.
    *  max_replica (int, optional) &#x2014; The maximum number of replicas
      (instances) to scale to for the Inference Endpoint. Defaults to 1.
    *  scale_to_zero_timeout (int, optional) &#x2014; The duration in minutes
      before an inactive endpoint is scaled to zero. Defaults to 15.
    *  revision (str, optional) &#x2014; The specific model revision to deploy
      on the Inference Endpoint (e.g.
      "6c0e6080953db56375760c0471a8c5f2929baf11").
    *  task (str, optional) &#x2014; The task on which to deploy the model
      (e.g. "text-classification").
    *  custom_image (Dict, optional) &#x2014; A custom Docker image to use for
      the Inference Endpoint. This is useful if you want to deploy an Inference
      Endpoint running on the text-generation-inference (TGI) framework (see
      examples).
    *  secrets (Dict[str, str], optional) &#x2014; Secret values to inject in
      the container environment.
    *  type ([`InferenceEndpointType], *optional*) -- The type of the Inference
      Endpoint, which can be&#x201C;protected&#x201D;
      (default),&#x201C;public&#x201D;or&#x201C;private&#x201D;`.
    *  namespace (str, optional) &#x2014; The namespace where the Inference
      Endpoint will be created. Defaults to the current user&#x2019;s
      namespace.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
InferenceEndpoint
information about the updated Inference Endpoint.
Create a new Inference Endpoint.
Example:
Copied
>>> from huggingface_hub import HfApi
>>> api = HfApi()
>>> endpoint = api.create_inference_endpoint(
...     "my-endpoint-name",
...     repository="gpt2",
...     framework="pytorch",
...     task="text-generation",
...     accelerator="cpu",
...     vendor="aws",
...     region="us-east-1",
...     type="protected",
...     instance_size="x2",
...     instance_type="intel-icl",
... )
>>> endpoint
InferenceEndpoint(name=&#x27;my-endpoint-name&#x27;, status="pending",...)

# Run inference on the endpoint
>>> endpoint.client.text_generation(...)
"..."
Copied
# Start an Inference Endpoint running Zephyr-7b-beta on TGI
>>> from huggingface_hub import HfApi
>>> api = HfApi()
>>> endpoint = api.create_inference_endpoint(
...     "aws-zephyr-7b-beta-0486",
...     repository="HuggingFaceH4/zephyr-7b-beta",
...     framework="pytorch",
...     task="text-generation",
...     accelerator="gpu",
...     vendor="aws",
...     region="us-east-1",
...     type="protected",
...     instance_size="x1",
...     instance_type="nvidia-a10g",
...     custom_image={
...         "health_route": "/health",
...         "env": {
...             "MAX_BATCH_PREFILL_TOKENS": "2048",
...             "MAX_INPUT_LENGTH": "1024",
...             "MAX_TOTAL_TOKENS": "1512",
...             "MODEL_ID": "/repository"
...         },
...         "url": "ghcr.io/huggingface/text-generation-inference:1.1.0",
...     },
...    secrets={"MY_SECRET_KEY": "secret_value"},
... )
*** create_pull_request ***
 <_source_>
( repo_id: str title: str token: Union[bool, str, None] = None description:
Optional[str] = None repo_type: Optional[str] = None  )
Parameters
    *  repo_id (str) &#x2014; A namespace (user or an organization) and a repo
      name separated by a /.
    *  title (str) &#x2014; The title of the discussion. It can be up to 200
      characters long, and must be at least 3 characters long. Leading and
      trailing whitespaces will be stripped.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
    *  description (str, optional) &#x2014; An optional description for the
      Pull Request. Defaults to "Discussion opened with the huggingface_hub
      Python library"
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if
      uploading to a dataset or space, None or "model" if uploading to a model.
      Default is None.
Creates a Pull Request . Pull Requests created programmatically will be in
"draft" status.
Creating a Pull Request with changes can also be done at once with
HfApi.create_commit();
This is a wrapper around HfApi.create_discussion().
Returns: DiscussionWithDetails
Raises the following errors:
    * HTTPError if the HuggingFace API returned an error
    * ValueError if some parameter value is invalid
    * RepositoryNotFoundError If the repository to download from cannot be
      found. This may be because it doesnât exist, or because it is set to
      private and you do not have access.
*** create_repo ***
 <_source_>
( repo_id: str token: Union[str, bool, None] = None private: Optional[bool] =
None repo_type: Optional[str] = None exist_ok: bool = False resource_group_id:
Optional[str] = None space_sdk: Optional[str] = None space_hardware: Optional
[SpaceHardware] = None space_storage: Optional[SpaceStorage] = None
space_sleep_time: Optional[int] = None space_secrets: Optional[List[Dict[str,
str]]] = None space_variables: Optional[List[Dict[str, str]]] = None  ) â
RepoUrl
Parameters
    *  repo_id (str) &#x2014; A namespace (user or an organization) and a repo
      name separated by a /.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
    *  private (bool, optional) &#x2014; Whether to make the repo private. If
      None (default), the repo will be public unless the organization&#x2019;s
      default is private. This value is ignored if the repo already exists.
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if
      uploading to a dataset or space, None or "model" if uploading to a model.
      Default is None.
    *  exist_ok (bool, optional, defaults to False) &#x2014; If True, do not
      raise an error if repo already exists.
    *  resource_group_id (str, optional) &#x2014; Resource group in which to
      create the repo. Resource groups is only available for organizations and
      allow to define which members of the organization can access the
      resource. The ID of a resource group can be found in the URL of the
      resource&#x2019;s page on the Hub (e.g. "66670e5163145ca562cb1988"). To
      learn more about resource groups, see https://huggingface.co/docs/hub/en/
      security-resource-groups.
    *  space_sdk (str, optional) &#x2014; Choice of SDK to use if repo_type is
      &#x201C;space&#x201D;. Can be &#x201C;streamlit&#x201D;,
      &#x201C;gradio&#x201D;, &#x201C;docker&#x201D;, or
      &#x201C;static&#x201D;.
    *  space_hardware (SpaceHardware or str, optional) &#x2014; Choice of
      Hardware if repo_type is &#x201C;space&#x201D;. See SpaceHardware for a
      complete list.
    *  space_storage (SpaceStorage or str, optional) &#x2014; Choice of
      persistent storage tier. Example: "small". See SpaceStorage for a
      complete list.
    *  space_sleep_time (int, optional) &#x2014; Number of seconds of
      inactivity to wait before a Space is put to sleep. Set to -1 if you
      don&#x2019;t want your Space to sleep (default behavior for upgraded
      hardware). For free hardware, you can&#x2019;t configure the sleep time
      (value is fixed to 48 hours of inactivity). See https://huggingface.co/
      docs/hub/spaces-gpus#sleep-time for more details.
    *  space_secrets (List[Dict[str, str]], optional) &#x2014; A list of secret
      keys to set in your Space. Each item is in the form {"key": ..., "value":
      ..., "description": ...} where description is optional. For more details,
      see https://huggingface.co/docs/hub/spaces-overview#managing-secrets.
    *  space_variables (List[Dict[str, str]], optional) &#x2014; A list of
      public environment variables to set in your Space. Each item is in the
      form {"key": ..., "value": ..., "description": ...} where description is
      optional. For more details, see https://huggingface.co/docs/hub/spaces-
      overview#managing-secrets-and-environment-variables.
Returns
RepoUrl
URL to the newly created repo. Value is a subclass of str containing attributes
like endpoint, repo_type and repo_id.
Create an empty repo on the HuggingFace Hub.
*** create_tag ***
 <_source_>
( repo_id: str tag: str tag_message: Optional[str] = None revision: Optional
[str] = None token: Union[bool, str, None] = None repo_type: Optional[str] =
None exist_ok: bool = False  )
Parameters
    *  repo_id (str) &#x2014; The repository in which a commit will be tagged.
      Example: "user/my-cool-model".
    *  tag (str) &#x2014; The name of the tag to create.
    *  tag_message (str, optional) &#x2014; The description of the tag to
      create.
    *  revision (str, optional) &#x2014; The git revision to tag. It can be a
      branch name or the OID/SHA of a commit, as a hexadecimal string.
      Shorthands (7 first characters) are also supported. Defaults to the head
      of the "main" branch.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if
      tagging a dataset or space, None or "model" if tagging a model. Default
      is None.
    *  exist_ok (bool, optional, defaults to False) &#x2014; If True, do not
      raise an error if tag already exists.
Raises
RepositoryNotFoundError or RevisionNotFoundError or HfHubHTTPError
    * RepositoryNotFoundError â If repository is not found (error 404): wrong
      repo_id/repo_type, private but not authenticated or repo does not exist.
    * RevisionNotFoundError â If revision is not found (error 404) on the
      repo.
    * HfHubHTTPError â If the branch already exists on the repo (error 409)
      and exist_ok is set to False.
Tag a given commit of a repo on the Hub.
*** create_webhook ***
 <_source_>
( url: str watched: List[Union[Dict, WebhookWatchedItem]] domains: Optional
[List[constants.WEBHOOK_DOMAIN_T]] = None secret: Optional[str] = None token:
Union[bool, str, None] = None  ) â
WebhookInfo
Parameters
    *  url (str) &#x2014; URL to send the payload to.
    *  watched (List[WebhookWatchedItem]) &#x2014; List of WebhookWatchedItem
      to be watched by the webhook. It can be users, orgs, models, datasets or
      spaces. Watched items can also be provided as plain dictionaries.
    *  domains (List[Literal["repo", "discussion"]], optional) &#x2014; List of
      domains to watch. It can be &#x201C;repo&#x201D;,
      &#x201C;discussion&#x201D; or both.
    *  secret (str, optional) &#x2014; A secret to sign the payload with.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
WebhookInfo
Info about the newly created webhook.
Create a new webhook.
Example:
Copied
>>> from huggingface_hub import create_webhook
>>> payload = create_webhook(
...     watched=[{"type": "user", "name": "julien-c"}, {"type": "org", "name":
"HuggingFaceH4"}],
...     url="https://webhook.site/a2176e82-5720-43ee-9e06-f91cb4c91548",
...     domains=["repo", "discussion"],
...     secret="my-secret",
... )
>>> print(payload)
WebhookInfo(
    id="654bbbc16f2ec14d77f109cc",
    url="https://webhook.site/a2176e82-5720-43ee-9e06-f91cb4c91548",
    watched=[WebhookWatchedItem(type="user", name="julien-c"),
WebhookWatchedItem(type="org", name="HuggingFaceH4")],
    domains=["repo", "discussion"],
    secret="my-secret",
    disabled=False,
)
*** dataset_info ***
 <_source_>
( repo_id: str revision: Optional[str] = None timeout: Optional[float] = None
files_metadata: bool = False expand: Optional[List[ExpandDatasetProperty_T]] =
None token: Union[bool, str, None] = None  ) â
hf_api.DatasetInfo
Parameters
    *  repo_id (str) &#x2014; A namespace (user or an organization) and a repo
      name separated by a /.
    *  revision (str, optional) &#x2014; The revision of the dataset repository
      from which to get the information.
    *  timeout (float, optional) &#x2014; Whether to set a timeout for the
      request to the Hub.
    *  files_metadata (bool, optional) &#x2014; Whether or not to retrieve
      metadata for files in the repository (size, LFS metadata, etc). Defaults
      to False.
    *  expand (List[ExpandDatasetProperty_T], optional) &#x2014; List
      properties to return in the response. When used, only the properties in
      the list will be returned. This parameter cannot be used if
      files_metadata is passed. Possible values are "author", "cardData",
      "citation", "createdAt", "disabled", "description", "downloads",
      "downloadsAllTime", "gated", "lastModified", "likes",
      "paperswithcode_id", "private", "siblings", "sha", "tags",
      "trendingScore","usedStorage" and "resourceGroup".
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
hf_api.DatasetInfo
The dataset repository information.
Get info on one specific dataset on huggingface.co.
Dataset can be private if you pass an acceptable token.
Raises the following errors:
    * RepositoryNotFoundError If the repository to download from cannot be
      found. This may be because it doesnât exist, or because it is set to
      private and you do not have access.
    * RevisionNotFoundError If the revision to download from cannot be found.
*** delete_branch ***
 <_source_>
( repo_id: str branch: str token: Union[bool, str, None] = None repo_type:
Optional[str] = None  )
Parameters
    *  repo_id (str) &#x2014; The repository in which a branch will be deleted.
      Example: "user/my-cool-model".
    *  branch (str) &#x2014; The name of the branch to delete.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if
      creating a branch on a dataset or space, None or "model" if tagging a
      model. Default is None.
Raises
RepositoryNotFoundError or HfHubHTTPError
    * RepositoryNotFoundError â If repository is not found (error 404): wrong
      repo_id/repo_type, private but not authenticated or repo does not exist.
    * HfHubHTTPError â If trying to delete a protected branch. Ex: main
      cannot be deleted.
    * HfHubHTTPError â If trying to delete a branch that does not exist.
Delete a branch from a repo on the Hub.
*** delete_collection ***
 <_source_>
( collection_slug: str missing_ok: bool = False token: Union[bool, str, None] =
None  )
Parameters
    *  collection_slug (str) &#x2014; Slug of the collection to delete.
      Example: "TheBloke/recent-models-64f9a55bb3115b4f513ec026".
    *  missing_ok (bool, optional) &#x2014; If True, do not raise an error if
      collection doesn&#x2019;t exists.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Delete a collection on the Hub.
Example:
Copied
>>> from huggingface_hub import delete_collection
>>> collection = delete_collection("username/useless-collection-
64f9a55bb3115b4f513ec026", missing_ok=True)
This is a non-revertible action. A deleted collection cannot be restored.
*** delete_collection_item ***
 <_source_>
( collection_slug: str item_object_id: str missing_ok: bool = False token:
Union[bool, str, None] = None  )
Parameters
    *  collection_slug (str) &#x2014; Slug of the collection to update.
      Example: "TheBloke/recent-models-64f9a55bb3115b4f513ec026".
    *  item_object_id (str) &#x2014; ID of the item in the collection. This is
      not the id of the item on the Hub (repo_id or paper id). It must be
      retrieved from a CollectionItem object. Example: collection.items
      [0].item_object_id.
    *  missing_ok (bool, optional) &#x2014; If True, do not raise an error if
      item doesn&#x2019;t exists.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Delete an item from a collection.
Example:
Copied
>>> from huggingface_hub import get_collection, delete_collection_item

# Get collection first
>>> collection = get_collection("TheBloke/recent-models-
64f9a55bb3115b4f513ec026")

# Delete item based on its ID
>>> delete_collection_item(
...     collection_slug="TheBloke/recent-models-64f9a55bb3115b4f513ec026",
...     item_object_id=collection.items[-1].item_object_id,
... )
*** delete_file ***
 <_source_>
( path_in_repo: str repo_id: str token: Union[str, bool, None] = None
repo_type: Optional[str] = None revision: Optional[str] = None commit_message:
Optional[str] = None commit_description: Optional[str] = None create_pr:
Optional[bool] = None parent_commit: Optional[str] = None  )
Parameters
    *  path_in_repo (str) &#x2014; Relative filepath in the repo, for example:
      "checkpoints/1fec34a/weights.bin"
    *  repo_id (str) &#x2014; The repository from which the file will be
      deleted, for example: "username/custom_transformers"
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if the
      file is in a dataset or space, None or "model" if in a model. Default is
      None.
    *  revision (str, optional) &#x2014; The git revision to commit from.
      Defaults to the head of the "main" branch.
    *  commit_message (str, optional) &#x2014; The summary / title / first line
      of the generated commit. Defaults to f"Delete {path_in_repo} with
      huggingface_hub".
    *  commit_description (str optional) &#x2014; The description of the
      generated commit
    *  create_pr (boolean, optional) &#x2014; Whether or not to create a Pull
      Request with that commit. Defaults to False. If revision is not set, PR
      is opened against the "main" branch. If revision is set and is a branch,
      PR is opened against this branch. If revision is set and is not a branch
      name (example: a commit oid), an RevisionNotFoundError is returned by the
      server.
    *  parent_commit (str, optional) &#x2014; The OID / SHA of the parent
      commit, as a hexadecimal string. Shorthands (7 first characters) are also
      supported. If specified and create_pr is False, the commit will fail if
      revision does not point to parent_commit. If specified and create_pr is
      True, the pull request will be created from parent_commit. Specifying
      parent_commit ensures the repo has not changed before committing the
      changes, and can be especially useful if the repo is updated / committed
      to concurrently.
Deletes a file in the given repo.
Raises the following errors:
    * HTTPError if the HuggingFace API returned an error
    * ValueError if some parameter value is invalid
    * RepositoryNotFoundError If the repository to download from cannot be
      found. This may be because it doesnât exist, or because it is set to
      private and you do not have access.
    * RevisionNotFoundError If the revision to download from cannot be found.
    * EntryNotFoundError If the file to download cannot be found.
*** delete_files ***
 <_source_>
( repo_id: str delete_patterns: List[str] token: Union[bool, str, None] = None
repo_type: Optional[str] = None revision: Optional[str] = None commit_message:
Optional[str] = None commit_description: Optional[str] = None create_pr:
Optional[bool] = None parent_commit: Optional[str] = None  )
Parameters
    *  repo_id (str) &#x2014; The repository from which the folder will be
      deleted, for example: "username/custom_transformers"
    *  delete_patterns (List[str]) &#x2014; List of files or folders to delete.
      Each string can either be a file path, a folder path or a Unix shell-
      style wildcard. E.g. ["file.txt", "folder/", "data/*.parquet"]
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False. to the stored token.
    *  repo_type (str, optional) &#x2014; Type of the repo to delete files
      from. Can be "model", "dataset" or "space". Defaults to "model".
    *  revision (str, optional) &#x2014; The git revision to commit from.
      Defaults to the head of the "main" branch.
    *  commit_message (str, optional) &#x2014; The summary (first line) of the
      generated commit. Defaults to f"Delete files using huggingface_hub".
    *  commit_description (str optional) &#x2014; The description of the
      generated commit.
    *  create_pr (boolean, optional) &#x2014; Whether or not to create a Pull
      Request with that commit. Defaults to False. If revision is not set, PR
      is opened against the "main" branch. If revision is set and is a branch,
      PR is opened against this branch. If revision is set and is not a branch
      name (example: a commit oid), an RevisionNotFoundError is returned by the
      server.
    *  parent_commit (str, optional) &#x2014; The OID / SHA of the parent
      commit, as a hexadecimal string. Shorthands (7 first characters) are also
      supported. If specified and create_pr is False, the commit will fail if
      revision does not point to parent_commit. If specified and create_pr is
      True, the pull request will be created from parent_commit. Specifying
      parent_commit ensures the repo has not changed before committing the
      changes, and can be especially useful if the repo is updated / committed
      to concurrently.
Delete files from a repository on the Hub.
If a folder path is provided, the entire folder is deleted as well as all files
it contained.
*** delete_folder ***
 <_source_>
( path_in_repo: str repo_id: str token: Union[bool, str, None] = None
repo_type: Optional[str] = None revision: Optional[str] = None commit_message:
Optional[str] = None commit_description: Optional[str] = None create_pr:
Optional[bool] = None parent_commit: Optional[str] = None  )
Parameters
    *  path_in_repo (str) &#x2014; Relative folder path in the repo, for
      example: "checkpoints/1fec34a".
    *  repo_id (str) &#x2014; The repository from which the folder will be
      deleted, for example: "username/custom_transformers"
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False. to the stored token.
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if the
      folder is in a dataset or space, None or "model" if in a model. Default
      is None.
    *  revision (str, optional) &#x2014; The git revision to commit from.
      Defaults to the head of the "main" branch.
    *  commit_message (str, optional) &#x2014; The summary / title / first line
      of the generated commit. Defaults to f"Delete folder {path_in_repo} with
      huggingface_hub".
    *  commit_description (str optional) &#x2014; The description of the
      generated commit.
    *  create_pr (boolean, optional) &#x2014; Whether or not to create a Pull
      Request with that commit. Defaults to False. If revision is not set, PR
      is opened against the "main" branch. If revision is set and is a branch,
      PR is opened against this branch. If revision is set and is not a branch
      name (example: a commit oid), an RevisionNotFoundError is returned by the
      server.
    *  parent_commit (str, optional) &#x2014; The OID / SHA of the parent
      commit, as a hexadecimal string. Shorthands (7 first characters) are also
      supported. If specified and create_pr is False, the commit will fail if
      revision does not point to parent_commit. If specified and create_pr is
      True, the pull request will be created from parent_commit. Specifying
      parent_commit ensures the repo has not changed before committing the
      changes, and can be especially useful if the repo is updated / committed
      to concurrently.
Deletes a folder in the given repo.
Simple wrapper around create_commit() method.
*** delete_inference_endpoint ***
 <_source_>
( name: str namespace: Optional[str] = None token: Union[bool, str, None] =
None  )
Parameters
    *  name (str) &#x2014; The name of the Inference Endpoint to delete.
    *  namespace (str, optional) &#x2014; The namespace in which the Inference
      Endpoint is located. Defaults to the current user.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Delete an Inference Endpoint.
This operation is not reversible. If you donât want to be charged for an
Inference Endpoint, it is preferable to pause it with pause_inference_endpoint
() or scale it to zero with scale_to_zero_inference_endpoint().
For convenience, you can also delete an Inference Endpoint using
InferenceEndpoint.delete().
*** delete_repo ***
 <_source_>
( repo_id: str token: Union[str, bool, None] = None repo_type: Optional[str] =
None missing_ok: bool = False  )
Parameters
    *  repo_id (str) &#x2014; A namespace (user or an organization) and a repo
      name separated by a /.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if
      uploading to a dataset or space, None or "model" if uploading to a model.
    *  missing_ok (bool, optional, defaults to False) &#x2014; If True, do not
      raise an error if repo does not exist.
Raises
RepositoryNotFoundError
    * RepositoryNotFoundError â If the repository to delete from cannot be
      found and missing_ok is set to False (default).
Delete a repo from the HuggingFace Hub. CAUTION: this is irreversible.
*** delete_space_secret ***
 <_source_>
( repo_id: str key: str token: Union[bool, str, None] = None  )
Parameters
    *  repo_id (str) &#x2014; ID of the repo to update. Example: "bigcode/in-
      the-stack".
    *  key (str) &#x2014; Secret key. Example: "GITHUB_API_KEY".
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Deletes a secret from a Space.
Secrets allow to set secret keys or tokens to a Space without hardcoding them.
For more details, see https://huggingface.co/docs/hub/spaces-overview#managing-
secrets.
*** delete_space_storage ***
 <_source_>
( repo_id: str token: Union[bool, str, None] = None  ) â
SpaceRuntime
Parameters
    *  repo_id (str) &#x2014; ID of the Space to update. Example: "open-llm-
      leaderboard/open_llm_leaderboard".
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
SpaceRuntime
Runtime information about a Space including Space stage and hardware.
Raises
BadRequestError
    * BadRequestError â If space has no persistent storage.
Delete persistent storage for a Space.
*** delete_space_variable ***
 <_source_>
( repo_id: str key: str token: Union[bool, str, None] = None  )
Parameters
    *  repo_id (str) &#x2014; ID of the repo to update. Example: "bigcode/in-
      the-stack".
    *  key (str) &#x2014; Variable key. Example: "MODEL_REPO_ID"
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Deletes a variable from a Space.
Variables allow to set environment variables to a Space without hardcoding
them. For more details, see https://huggingface.co/docs/hub/spaces-
overview#managing-secrets-and-environment-variables
*** delete_tag ***
 <_source_>
( repo_id: str tag: str token: Union[bool, str, None] = None repo_type:
Optional[str] = None  )
Parameters
    *  repo_id (str) &#x2014; The repository in which a tag will be deleted.
      Example: "user/my-cool-model".
    *  tag (str) &#x2014; The name of the tag to delete.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if
      tagging a dataset or space, None or "model" if tagging a model. Default
      is None.
Raises
RepositoryNotFoundError or RevisionNotFoundError
    * RepositoryNotFoundError â If repository is not found (error 404): wrong
      repo_id/repo_type, private but not authenticated or repo does not exist.
    * RevisionNotFoundError â If tag is not found.
Delete a tag from a repo on the Hub.
*** delete_webhook ***
 <_source_>
( webhook_id: str token: Union[bool, str, None] = None  ) â
None
Parameters
    *  webhook_id (str) &#x2014; The unique identifier of the webhook to
      delete.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
None
Delete a webhook.
Example:
Copied
>>> from huggingface_hub import delete_webhook
>>> delete_webhook("654bbbc16f2ec14d77f109cc")
*** disable_webhook ***
 <_source_>
( webhook_id: str token: Union[bool, str, None] = None  ) â
WebhookInfo
Parameters
    *  webhook_id (str) &#x2014; The unique identifier of the webhook to
      disable.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
WebhookInfo
Info about the disabled webhook.
Disable a webhook (makes it âdisabledâ).
Example:
Copied
>>> from huggingface_hub import disable_webhook
>>> disabled_webhook = disable_webhook("654bbbc16f2ec14d77f109cc")
>>> disabled_webhook
WebhookInfo(
    id="654bbbc16f2ec14d77f109cc",
    url="https://webhook.site/a2176e82-5720-43ee-9e06-f91cb4c91548",
    watched=[WebhookWatchedItem(type="user", name="julien-c"),
WebhookWatchedItem(type="org", name="HuggingFaceH4")],
    domains=["repo", "discussion"],
    secret="my-secret",
    disabled=True,
)
*** duplicate_space ***
 <_source_>
( from_id: str to_id: Optional[str] = None private: Optional[bool] = None
token: Union[bool, str, None] = None exist_ok: bool = False hardware: Optional
[SpaceHardware] = None storage: Optional[SpaceStorage] = None sleep_time:
Optional[int] = None secrets: Optional[List[Dict[str, str]]] = None variables:
Optional[List[Dict[str, str]]] = None  ) â
RepoUrl
Parameters
    *  from_id (str) &#x2014; ID of the Space to duplicate. Example: "pharma/
      CLIP-Interrogator".
    *  to_id (str, optional) &#x2014; ID of the new Space. Example: "dog/CLIP-
      Interrogator". If not provided, the new Space will have the same name as
      the original Space, but in your account.
    *  private (bool, optional) &#x2014; Whether the new Space should be
      private or not. Defaults to the same privacy as the original Space.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
    *  exist_ok (bool, optional, defaults to False) &#x2014; If True, do not
      raise an error if repo already exists.
    *  hardware (SpaceHardware or str, optional) &#x2014; Choice of Hardware.
      Example: "t4-medium". See SpaceHardware for a complete list.
    *  storage (SpaceStorage or str, optional) &#x2014; Choice of persistent
      storage tier. Example: "small". See SpaceStorage for a complete list.
    *  sleep_time (int, optional) &#x2014; Number of seconds of inactivity to
      wait before a Space is put to sleep. Set to -1 if you don&#x2019;t want
      your Space to sleep (default behavior for upgraded hardware). For free
      hardware, you can&#x2019;t configure the sleep time (value is fixed to 48
      hours of inactivity). See https://huggingface.co/docs/hub/spaces-
      gpus#sleep-time for more details.
    *  secrets (List[Dict[str, str]], optional) &#x2014; A list of secret keys
      to set in your Space. Each item is in the form {"key": ..., "value": ...,
      "description": ...} where description is optional. For more details, see
      https://huggingface.co/docs/hub/spaces-overview#managing-secrets.
    *  variables (List[Dict[str, str]], optional) &#x2014; A list of public
      environment variables to set in your Space. Each item is in the form
      {"key": ..., "value": ..., "description": ...} where description is
      optional. For more details, see https://huggingface.co/docs/hub/spaces-
      overview#managing-secrets-and-environment-variables.
Returns
RepoUrl
URL to the newly created repo. Value is a subclass of str containing attributes
like endpoint, repo_type and repo_id.
Raises
RepositoryNotFoundError or HTTPError
    * RepositoryNotFoundError â If one of from_id or to_id cannot be found.
      This may be because it doesnât exist, or because it is set to private
      and you do not have access.
    * HTTPError â If the HuggingFace API returned an error
Duplicate a Space.
Programmatically duplicate a Space. The new Space will be created in your
account and will be in the same state as the original Space (running or
paused). You can duplicate a Space no matter the current state of a Space.
Example:
Copied
>>> from huggingface_hub import duplicate_space

# Duplicate a Space to your account
>>> duplicate_space("multimodalart/dreambooth-training")
RepoUrl(&#x27;https://huggingface.co/spaces/nateraw/dreambooth-
training&#x27;,...)

# Can set custom destination id and visibility flag.
>>> duplicate_space("multimodalart/dreambooth-training", to_id="my-dreambooth",
private=True)
RepoUrl(&#x27;https://huggingface.co/spaces/nateraw/my-dreambooth&#x27;,...)
*** edit_discussion_comment ***
 <_source_>
( repo_id: str discussion_num: int comment_id: str new_content: str token:
Union[bool, str, None] = None repo_type: Optional[str] = None  ) â
DiscussionComment
Parameters
    *  repo_id (str) &#x2014; A namespace (user or an organization) and a repo
      name separated by a /.
    *  discussion_num (int) &#x2014; The number of the Discussion or Pull
      Request . Must be a strictly positive integer.
    *  comment_id (str) &#x2014; The ID of the comment to edit.
    *  new_content (str) &#x2014; The new content of the comment. Comments
      support markdown formatting.
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if
      uploading to a dataset or space, None or "model" if uploading to a model.
      Default is None.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
DiscussionComment
the edited comment
Edits a comment on a Discussion / Pull Request.
Raises the following errors:
    * HTTPError if the HuggingFace API returned an error
    * ValueError if some parameter value is invalid
    * RepositoryNotFoundError If the repository to download from cannot be
      found. This may be because it doesnât exist, or because it is set to
      private and you do not have access.
*** enable_webhook ***
 <_source_>
( webhook_id: str token: Union[bool, str, None] = None  ) â
WebhookInfo
Parameters
    *  webhook_id (str) &#x2014; The unique identifier of the webhook to
      enable.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
WebhookInfo
Info about the enabled webhook.
Enable a webhook (makes it âactiveâ).
Example:
Copied
>>> from huggingface_hub import enable_webhook
>>> enabled_webhook = enable_webhook("654bbbc16f2ec14d77f109cc")
>>> enabled_webhook
WebhookInfo(
    id="654bbbc16f2ec14d77f109cc",
    url="https://webhook.site/a2176e82-5720-43ee-9e06-f91cb4c91548",
    watched=[WebhookWatchedItem(type="user", name="julien-c"),
WebhookWatchedItem(type="org", name="HuggingFaceH4")],
    domains=["repo", "discussion"],
    secret="my-secret",
    disabled=False,
)
*** file_exists ***
 <_source_>
( repo_id: str filename: str repo_type: Optional[str] = None revision: Optional
[str] = None token: Union[str, bool, None] = None  )
Parameters
    *  repo_id (str) &#x2014; A namespace (user or an organization) and a repo
      name separated by a /.
    *  filename (str) &#x2014; The name of the file to check, for example:
      "config.json"
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if
      getting repository info from a dataset or a space, None or "model" if
      getting repository info from a model. Default is None.
    *  revision (str, optional) &#x2014; The revision of the repository from
      which to get the information. Defaults to "main" branch.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Checks if a file exists in a repository on the Hugging Face Hub.
Examples:
Copied
>>> from huggingface_hub import file_exists
>>> file_exists("bigcode/starcoder", "config.json")
True
>>> file_exists("bigcode/starcoder", "not-a-file")
False
>>> file_exists("bigcode/not-a-repo", "config.json")
False
*** get_collection ***
 <_source_>
( collection_slug: str token: Union[bool, str, None] = None  )
Parameters
    *  collection_slug (str) &#x2014; Slug of the collection of the Hub.
      Example: "TheBloke/recent-models-64f9a55bb3115b4f513ec026".
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Gets information about a Collection on the Hub.
Returns: Collection
Example:
Copied
>>> from huggingface_hub import get_collection
>>> collection = get_collection("TheBloke/recent-models-
64f9a55bb3115b4f513ec026")
>>> collection.title
&#x27;Recent models&#x27;
>>> len(collection.items)
37
>>> collection.items[0]
CollectionItem(
    item_object_id=&#x27;651446103cd773a050bf64c2&#x27;,
    item_id=&#x27;TheBloke/U-Amethyst-20B-AWQ&#x27;,
    item_type=&#x27;model&#x27;,
    position=88,
    note=None
)
*** get_dataset_tags ***
 <_source_>
( )
List all valid dataset tags as a nested namespace object.
*** get_discussion_details ***
 <_source_>
( repo_id: str discussion_num: int repo_type: Optional[str] = None token: Union
[bool, str, None] = None  )
Parameters
    *  repo_id (str) &#x2014; A namespace (user or an organization) and a repo
      name separated by a /.
    *  discussion_num (int) &#x2014; The number of the Discussion or Pull
      Request . Must be a strictly positive integer.
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if
      uploading to a dataset or space, None or "model" if uploading to a model.
      Default is None.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Fetches a Discussionâs / Pull Request âs details from the Hub.
Returns: DiscussionWithDetails
Raises the following errors:
    * HTTPError if the HuggingFace API returned an error
    * ValueError if some parameter value is invalid
    * RepositoryNotFoundError If the repository to download from cannot be
      found. This may be because it doesnât exist, or because it is set to
      private and you do not have access.
*** get_full_repo_name ***
 <_source_>
( model_id: str organization: Optional[str] = None token: Union[bool, str,
None] = None  ) â
str
Parameters
    *  model_id (str) &#x2014; The name of the model.
    *  organization (str, optional) &#x2014; If passed, the repository name
      will be in the organization namespace instead of the user namespace.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
str
The repository name in the userâs namespace ({username}/{model_id}) if no
organization is passed, and under the organization namespace ({organization}/
{model_id}) otherwise.
Returns the repository name for a given model ID and optional organization.
*** get_hf_file_metadata ***
 <_source_>
( url: str token: Union[bool, str, None] = None proxies: Optional[Dict] = None
timeout: Optional[float] = 10  )
Parameters
    *  url (str) &#x2014; File url, for example returned by hf_hub_url().
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
    *  proxies (dict, optional) &#x2014; Dictionary mapping protocol to the URL
      of the proxy passed to requests.request.
    *  timeout (float, optional, defaults to 10) &#x2014; How many seconds to
      wait for the server to send metadata before giving up.
Fetch metadata of a file versioned on the Hub for a given url.
*** get_inference_endpoint ***
 <_source_>
( name: str namespace: Optional[str] = None token: Union[bool, str, None] =
None  ) â
InferenceEndpoint
Parameters
    *  name (str) &#x2014; The name of the Inference Endpoint to retrieve
      information about.
    *  namespace (str, optional) &#x2014; The namespace in which the Inference
      Endpoint is located. Defaults to the current user.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
InferenceEndpoint
information about the requested Inference Endpoint.
Get information about an Inference Endpoint.
Example:
Copied
>>> from huggingface_hub import HfApi
>>> api = HfApi()
>>> endpoint = api.get_inference_endpoint("my-text-to-image")
>>> endpoint
InferenceEndpoint(name=&#x27;my-text-to-image&#x27;, ...)

# Get status
>>> endpoint.status
&#x27;running&#x27;
>>> endpoint.url
&#x27;https://my-text-to-image.region.vendor.endpoints.huggingface.cloud&#x27;

# Run inference
>>> endpoint.client.text_to_image(...)
*** get_model_tags ***
 <_source_>
( )
List all valid model tags as a nested namespace object
*** get_paths_info ***
 <_source_>
( repo_id: str paths: Union[List[str], str] expand: bool = False revision:
Optional[str] = None repo_type: Optional[str] = None token: Union[str, bool,
None] = None  ) â
List[Union[RepoFile, RepoFolder]]
Parameters
    *  repo_id (str) &#x2014; A namespace (user or an organization) and a repo
      name separated by a /.
    *  paths (Union[List[str], str], optional) &#x2014; The paths to get
      information about. If a path do not exist, it is ignored without raising
      an exception.
    *  expand (bool, optional, defaults to False) &#x2014; Whether to fetch
      more information about the paths (e.g. last commit and files&#x2019;
      security scan results). This operation is more expensive for the server
      so only 50 results are returned per page (instead of 1000). As pagination
      is implemented in huggingface_hub, this is transparent for you except for
      the time it takes to get the results.
    *  revision (str, optional) &#x2014; The revision of the repository from
      which to get the information. Defaults to "main" branch.
    *  repo_type (str, optional) &#x2014; The type of the repository from which
      to get the information ("model", "dataset" or "space". Defaults to
      "model".
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
List[Union[RepoFile, RepoFolder]]
The information about the paths, as a list of RepoFile and RepoFolder objects.
Raises
RepositoryNotFoundError or RevisionNotFoundError
    * RepositoryNotFoundError â If repository is not found (error 404): wrong
      repo_id/repo_type, private but not authenticated or repo does not exist.
    * RevisionNotFoundError â If revision is not found (error 404) on the
      repo.
Get information about a repoâs paths.
Example:
Copied
>>> from huggingface_hub import get_paths_info
>>> paths_info = get_paths_info("allenai/c4", ["README.md", "en"],
repo_type="dataset")
>>> paths_info
[
    RepoFile(path=&#x27;README.md&#x27;, size=2379,
blob_id=&#x27;f84cb4c97182890fc1dbdeaf1a6a468fd27b4fff&#x27;, lfs=None,
last_commit=None, security=None),
    RepoFolder(path=&#x27;en&#x27;,
tree_id=&#x27;dc943c4c40f53d02b31ced1defa7e5f438d5862e&#x27;, last_commit=None)
]
*** get_repo_discussions ***
 <_source_>
( repo_id: str author: Optional[str] = None discussion_type: Optional
[constants.DiscussionTypeFilter] = None discussion_status: Optional
[constants.DiscussionStatusFilter] = None repo_type: Optional[str] = None
token: Union[bool, str, None] = None  ) â
Iterator[Discussion]
Parameters
    *  repo_id (str) &#x2014; A namespace (user or an organization) and a repo
      name separated by a /.
    *  author (str, optional) &#x2014; Pass a value to filter by discussion
      author. None means no filter. Default is None.
    *  discussion_type (str, optional) &#x2014; Set to "pull_request" to fetch
      only pull requests, "discussion" to fetch only discussions. Set to "all"
      or None to fetch both. Default is None.
    *  discussion_status (str, optional) &#x2014; Set to "open" (respectively
      "closed") to fetch only open (respectively closed) discussions. Set to
      "all" or None to fetch both. Default is None.
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if
      fetching from a dataset or space, None or "model" if fetching from a
      model. Default is None.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
Iterator[Discussion]
An iterator of Discussion objects.
Fetches Discussions and Pull Requests for the given repo.
Example:
Collecting all discussions of a repo in a list:
Copied
>>> from huggingface_hub import get_repo_discussions
>>> discussions_list = list(get_repo_discussions(repo_id="bert-base-uncased"))
Iterating over discussions of a repo:
Copied
>>> from huggingface_hub import get_repo_discussions
>>> for discussion in get_repo_discussions(repo_id="bert-base-uncased"):
...     print(discussion.num, discussion.title)
*** get_safetensors_metadata ***
 <_source_>
( repo_id: str repo_type: Optional[str] = None revision: Optional[str] = None
token: Union[bool, str, None] = None  ) â
SafetensorsRepoMetadata
Parameters
    *  repo_id (str) &#x2014; A user or an organization name and a repo name
      separated by a /.
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if the
      file is in a dataset or space, None or "model" if in a model. Default is
      None.
    *  revision (str, optional) &#x2014; The git revision to fetch the file
      from. Can be a branch name, a tag, or a commit hash. Defaults to the head
      of the "main" branch.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
SafetensorsRepoMetadata
information related to safetensors repo.
Raises
NotASafetensorsRepoError or SafetensorsParsingError
    * NotASafetensorsRepoError â If the repo is not a safetensors repo i.e.
      doesnât have either a model.safetensors or a
      model.safetensors.index.json file.
    * SafetensorsParsingError â If a safetensors file header couldnât be
      parsed correctly.
Parse metadata for a safetensors repo on the Hub.
We first check if the repo has a single safetensors file or a sharded
safetensors repo. If itâs a single safetensors file, we parse the metadata
from this file. If itâs a sharded safetensors repo, we parse the metadata
from the index file and then parse the metadata from each shard.
To parse metadata from a single safetensors file, use
parse_safetensors_file_metadata().
For more details regarding the safetensors format, check out https://
huggingface.co/docs/safetensors/index#format.
Example:
Copied
# Parse repo with single weights file
>>> metadata = get_safetensors_metadata("bigscience/bloomz-560m")
>>> metadata
SafetensorsRepoMetadata(
    metadata=None,
    sharded=False,
    weight_map={&#x27;h.0.input_layernorm.bias&#x27;:
&#x27;model.safetensors&#x27;, ...},
    files_metadata={&#x27;model.safetensors&#x27;: SafetensorsFileMetadata
(...)}
)
>>> metadata.files_metadata["model.safetensors"].metadata
{&#x27;format&#x27;: &#x27;pt&#x27;}

# Parse repo with sharded model
>>> metadata = get_safetensors_metadata("bigscience/bloom")
Parse safetensors files:
100%|ââââââââââââââââââââââââââââââââââââââââââ|
72/72 [00:12<00:00,  5.78it/s]
>>> metadata
SafetensorsRepoMetadata(metadata={&#x27;total_size&#x27;: 352494542848},
sharded=True, weight_map={...}, files_metadata={...})
>>> len(metadata.files_metadata)
72  # All safetensors files have been fetched

# Parse repo with sharded model
>>> get_safetensors_metadata("runwayml/stable-diffusion-v1-5")
NotASafetensorsRepoError: &#x27;runwayml/stable-diffusion-v1-5&#x27; is not a
safetensors repo. Couldn&#x27;t find &#x27;model.safetensors.index.json&#x27;
or &#x27;model.safetensors&#x27; files.
*** get_space_runtime ***
 <_source_>
( repo_id: str token: Union[bool, str, None] = None  ) â
SpaceRuntime
Parameters
    *  repo_id (str) &#x2014; ID of the repo to update. Example: "bigcode/in-
      the-stack".
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
SpaceRuntime
Runtime information about a Space including Space stage and hardware.
Gets runtime information about a Space.
*** get_space_variables ***
 <_source_>
( repo_id: str token: Union[bool, str, None] = None  )
Parameters
    *  repo_id (str) &#x2014; ID of the repo to query. Example: "bigcode/in-
      the-stack".
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Gets all variables from a Space.
Variables allow to set environment variables to a Space without hardcoding
them. For more details, see https://huggingface.co/docs/hub/spaces-
overview#managing-secrets-and-environment-variables
*** get_token_permission ***
 <_source_>
( token: Union[bool, str, None] = None  ) â
Literal["read", "write", "fineGrained", None]
Parameters
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
Literal["read", "write", "fineGrained", None]
Permission granted by the token (âreadâ or âwriteâ). Returns None if no
token passed, if token is invalid or if role is not returned by the server.
This typically happens when the token is an OAuth token.
Check if a given token is valid and return its permissions.
This method is deprecated and will be removed in version 1.0. Permissions are
more complex than when get_token_permission was first introduced. OAuth and
fine-grain tokens allows for more detailed permissions. If you need to know the
permissions associated with a token, please use whoami and check the 'auth'
key.
For more details about tokens, please refer to https://huggingface.co/docs/hub/
security-tokens#what-are-user-access-tokens.
*** get_user_overview ***
 <_source_>
( username: str token: Union[bool, str, None] = None  ) â
User
Parameters
    *  username (str) &#x2014; Username of the user to get an overview of.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
User
A User object with the userâs overview.
Raises
HTTPError
    * HTTPError â HTTP 404 If the user does not exist on the Hub.
Get an overview of a user on the Hub.
*** get_webhook ***
 <_source_>
( webhook_id: str token: Union[bool, str, None] = None  ) â
WebhookInfo
Parameters
    *  webhook_id (str) &#x2014; The unique identifier of the webhook to get.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
WebhookInfo
Info about the webhook.
Get a webhook by its id.
Example:
Copied
>>> from huggingface_hub import get_webhook
>>> webhook = get_webhook("654bbbc16f2ec14d77f109cc")
>>> print(webhook)
WebhookInfo(
    id="654bbbc16f2ec14d77f109cc",
    watched=[WebhookWatchedItem(type="user", name="julien-c"),
WebhookWatchedItem(type="org", name="HuggingFaceH4")],
    url="https://webhook.site/a2176e82-5720-43ee-9e06-f91cb4c91548",
    secret="my-secret",
    domains=["repo", "discussion"],
    disabled=False,
)
*** grant_access ***
 <_source_>
( repo_id: str user: str repo_type: Optional[str] = None token: Union[bool,
str, None] = None  )
Parameters
    *  repo_id (str) &#x2014; The id of the repo to grant access to.
    *  user (str) &#x2014; The username of the user to grant access.
    *  repo_type (str, optional) &#x2014; The type of the repo to grant access
      to. Must be one of model, dataset or space. Defaults to model.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Raises
HTTPError
    * HTTPError â HTTP 400 if the repo is not gated.
    * HTTPError â HTTP 400 if the user already has access to the repo.
    * HTTPError â HTTP 403 if you only have read-only access to the repo.
      This can be the case if you donât have write or admin role in the
      organization the repo belongs to or if you passed a read token.
    * HTTPError â HTTP 404 if the user does not exist on the Hub.
Grant access to a user for a given gated repo.
Granting access donât require for the user to send an access request by
themselves. The user is automatically added to the accepted list meaning they
can download the files You can revoke the granted access at any time using
cancel_access_request() or reject_access_request().
For more info about gated repos, see https://huggingface.co/docs/hub/models-
gated.
*** hf_hub_download ***
 <_source_>
( repo_id: str filename: str subfolder: Optional[str] = None repo_type:
Optional[str] = None revision: Optional[str] = None cache_dir: Union[str, Path,
None] = None local_dir: Union[str, Path, None] = None force_download: bool =
False proxies: Optional[Dict] = None etag_timeout: float = 10 token: Union
[bool, str, None] = None local_files_only: bool = False resume_download:
Optional[bool] = None force_filename: Optional[str] = None
local_dir_use_symlinks: Union[bool, Literal['auto']] = 'auto'  ) â
str
Parameters
    *  repo_id (str) &#x2014; A user or an organization name and a repo name
      separated by a /.
    *  filename (str) &#x2014; The name of the file in the repo.
    *  subfolder (str, optional) &#x2014; An optional value corresponding to a
      folder inside the repository.
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if
      downloading from a dataset or space, None or "model" if downloading from
      a model. Default is None.
    *  revision (str, optional) &#x2014; An optional Git revision id which can
      be a branch name, a tag, or a commit hash.
    *  cache_dir (str, Path, optional) &#x2014; Path to the folder where cached
      files are stored.
    *  local_dir (str or Path, optional) &#x2014; If provided, the downloaded
      file will be placed under this directory.
    *  force_download (bool, optional, defaults to False) &#x2014; Whether the
      file should be downloaded even if it already exists in the local cache.
    *  proxies (dict, optional) &#x2014; Dictionary mapping protocol to the URL
      of the proxy passed to requests.request.
    *  etag_timeout (float, optional, defaults to 10) &#x2014; When fetching
      ETag, how many seconds to wait for the server to send data before giving
      up which is passed to requests.request.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
    *  local_files_only (bool, optional, defaults to False) &#x2014; If True,
      avoid downloading the file and return the path to the local cached file
      if it exists.
Returns
str
Local path of file or if networking is off, last version of file cached on
disk.
Raises
RepositoryNotFoundError or RevisionNotFoundError or EntryNotFoundError or
LocalEntryNotFoundError or EnvironmentError or OSError or ValueError
    * RepositoryNotFoundError â If the repository to download from cannot be
      found. This may be because it doesnât exist, or because it is set to
      private and you do not have access.
    * RevisionNotFoundError â If the revision to download from cannot be
      found.
    * EntryNotFoundError â If the file to download cannot be found.
    * LocalEntryNotFoundError â If network is disabled or unavailable and
      file is not found in cache.
    * EnvironmentError â If token=True but the token cannot be found.
    * OSError â If ETag cannot be determined.
    * ValueError â If some parameter value is invalid.
Download a given file if itâs not already present in the local cache.
The new cache file layout looks like this:
    * The cache directory contains one subfolder per repo_id (namespaced by
      repo type)
    * inside each repo folder:
          o refs is a list of the latest known revision => commit_hash pairs
          o blobs contains the actual file blobs (identified by their git-sha
            or sha256, depending on whether theyâre LFS files or not)
          o snapshots contains one subfolder per commit, each âcommitâ
            contains the subset of the files that have been resolved at that
            particular commit. Each filename is a symlink to the blob at that
            particular commit.
Copied
[  96]  .
âââ [ 160]  models--julien-c--EsperBERTo-small
    âââ [ 160]  blobs
    â   âââ [321M]
403450e234d65943a7dcf7e05a771ce3c92faa84dd07db4ac20f592037a1e4bd
    â   âââ [ 398]  7cb18dc9bafbfcf74629a4b760af1b160957a83e
    â   âââ [1.4K]  d7edf6bd2a681fb0175f7735299831ee1b22b812
    âââ [  96]  refs
    â   âââ [  40]  main
    âââ [ 128]  snapshots
        âââ [ 128]  2439f60ef33a0d46d85da5001d52aeda5b00ce9f
        â   âââ [  52]  README.md -> ../../blobs/
d7edf6bd2a681fb0175f7735299831ee1b22b812
        â   âââ [  76]  pytorch_model.bin -> ../../blobs/
403450e234d65943a7dcf7e05a771ce3c92faa84dd07db4ac20f592037a1e4bd
        âââ [ 128]  bbc77c8132af1cc5cf678da3f1ddf2de43606d48
            âââ [  52]  README.md -> ../../blobs/
7cb18dc9bafbfcf74629a4b760af1b160957a83e
            âââ [  76]  pytorch_model.bin -> ../../blobs/
403450e234d65943a7dcf7e05a771ce3c92faa84dd07db4ac20f592037a1e4bd
If local_dir is provided, the file structure from the repo will be replicated
in this location. When using this option, the cache_dir will not be used and a
.cache/huggingface/ folder will be created at the root of local_dir to store
some metadata related to the downloaded files. While this mechanism is not as
robust as the main cache-system, itâs optimized for regularly pulling the
latest version of a repository.
*** hide_discussion_comment ***
 <_source_>
( repo_id: str discussion_num: int comment_id: str token: Union[bool, str,
None] = None repo_type: Optional[str] = None  ) â
DiscussionComment
Parameters
    *  repo_id (str) &#x2014; A namespace (user or an organization) and a repo
      name separated by a /.
    *  discussion_num (int) &#x2014; The number of the Discussion or Pull
      Request . Must be a strictly positive integer.
    *  comment_id (str) &#x2014; The ID of the comment to edit.
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if
      uploading to a dataset or space, None or "model" if uploading to a model.
      Default is None.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
DiscussionComment
the hidden comment
Hides a comment on a Discussion / Pull Request.
Hidden comments' content cannot be retrieved anymore. Hiding a comment is
irreversible.
Raises the following errors:
    * HTTPError if the HuggingFace API returned an error
    * ValueError if some parameter value is invalid
    * RepositoryNotFoundError If the repository to download from cannot be
      found. This may be because it doesnât exist, or because it is set to
      private and you do not have access.
*** list_accepted_access_requests ***
 <_source_>
( repo_id: str repo_type: Optional[str] = None token: Union[bool, str, None] =
None  ) â
List[AccessRequest]
Parameters
    *  repo_id (str) &#x2014; The id of the repo to get access requests for.
    *  repo_type (str, optional) &#x2014; The type of the repo to get access
      requests for. Must be one of model, dataset or space. Defaults to model.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
List[AccessRequest]
A list of AccessRequest objects. Each time contains a username, email, status
and timestamp attribute. If the gated repo has a custom form, the fields
attribute will be populated with userâs answers.
Raises
HTTPError
    * HTTPError â HTTP 400 if the repo is not gated.
    * HTTPError â HTTP 403 if you only have read-only access to the repo.
      This can be the case if you donât have write or admin role in the
      organization the repo belongs to or if you passed a read token.
Get accepted access requests for a given gated repo.
An accepted request means the user has requested access to the repo and the
request has been accepted. The user can download any file of the repo. If the
approval mode is automatic, this list should contains by default all requests.
Accepted requests can be cancelled or rejected at any time using
cancel_access_request() and reject_access_request(). A cancelled request will
go back to the pending list while a rejected request will go to the rejected
list. In both cases, the user will lose access to the repo.
For more info about gated repos, see https://huggingface.co/docs/hub/models-
gated.
Example:
Copied
>>> from huggingface_hub import list_accepted_access_requests

>>> requests = list_accepted_access_requests("meta-llama/Llama-2-7b")
>>> len(requests)
411
>>> requests[0]
[
    AccessRequest(
        username=&#x27;clem&#x27;,
        fullname=&#x27;Clem ð¤&#x27;,
        email=&#x27;***&#x27;,
        timestamp=datetime.datetime(2023, 11, 23, 18, 4, 53, 828000,
tzinfo=datetime.timezone.utc),
        status=&#x27;accepted&#x27;,
        fields=None,
    ),
    ...
]
*** list_collections ***
 <_source_>
( owner: Union[List[str], str, None] = None item: Union[List[str], str, None] =
None sort: Optional[Literal['lastModified', 'trending', 'upvotes']] = None
limit: Optional[int] = None token: Union[bool, str, None] = None  ) â
Iterable[Collection]
Parameters
    *  owner (List[str] or str, optional) &#x2014; Filter by owner&#x2019;s
      username.
    *  item (List[str] or str, optional) &#x2014; Filter collections containing
      a particular items. Example: "models/teknium/OpenHermes-2.5-Mistral-7B",
      "datasets/squad" or "papers/2311.12983".
    *  sort (Literal["lastModified", "trending", "upvotes"], optional) &#x2014;
      Sort collections by last modified, trending or upvotes.
    *  limit (int, optional) &#x2014; Maximum number of collections to be
      returned.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
Iterable[Collection]
an iterable of Collection objects.
List collections on the Huggingface Hub, given some filters.
When listing collections, the item list per collection is truncated to 4 items
maximum. To retrieve all items from a collection, you must use get_collection
().
*** list_datasets ***
 <_source_>
( filter: Union[str, Iterable[str], None] = None author: Optional[str] = None
benchmark: Optional[Union[str, List[str]]] = None dataset_name: Optional[str] =
None gated: Optional[bool] = None language_creators: Optional[Union[str, List
[str]]] = None language: Optional[Union[str, List[str]]] = None
multilinguality: Optional[Union[str, List[str]]] = None size_categories:
Optional[Union[str, List[str]]] = None tags: Optional[Union[str, List[str]]] =
None task_categories: Optional[Union[str, List[str]]] = None task_ids: Optional
[Union[str, List[str]]] = None search: Optional[str] = None sort: Optional
[Union[Literal['last_modified'], str]] = None direction: Optional[Literal[-1]]
= None limit: Optional[int] = None expand: Optional[List
[ExpandDatasetProperty_T]] = None full: Optional[bool] = None token: Union
[bool, str, None] = None  ) â
Iterable[DatasetInfo]
Parameters
    *  filter (str or Iterable[str], optional) &#x2014; A string or list of
      string to filter datasets on the hub.
    *  author (str, optional) &#x2014; A string which identify the author of
      the returned datasets.
    *  benchmark (str or List, optional) &#x2014; A string or list of strings
      that can be used to identify datasets on the Hub by their official
      benchmark.
    *  dataset_name (str, optional) &#x2014; A string or list of strings that
      can be used to identify datasets on the Hub by its name, such as SQAC or
      wikineural
    *  gated (bool, optional) &#x2014; A boolean to filter datasets on the Hub
      that are gated or not. By default, all datasets are returned. If
      gated=True is passed, only gated datasets are returned. If gated=False is
      passed, only non-gated datasets are returned.
    *  language_creators (str or List, optional) &#x2014; A string or list of
      strings that can be used to identify datasets on the Hub with how the
      data was curated, such as crowdsourced or machine_generated.
    *  language (str or List, optional) &#x2014; A string or list of strings
      representing a two-character language to filter datasets by on the Hub.
    *  multilinguality (str or List, optional) &#x2014; A string or list of
      strings representing a filter for datasets that contain multiple
      languages.
    *  size_categories (str or List, optional) &#x2014; A string or list of
      strings that can be used to identify datasets on the Hub by the size of
      the dataset such as 100K<n<1M or 1M<n<10M.
    *  tags (str or List, optional) &#x2014; A string tag or a list of tags to
      filter datasets on the Hub.
    *  task_categories (str or List, optional) &#x2014; A string or list of
      strings that can be used to identify datasets on the Hub by the designed
      task, such as audio_classification or named_entity_recognition.
    *  task_ids (str or List, optional) &#x2014; A string or list of strings
      that can be used to identify datasets on the Hub by the specific task
      such as speech_emotion_recognition or paraphrase.
    *  search (str, optional) &#x2014; A string that will be contained in the
      returned datasets.
    *  sort (Literal["last_modified"] or str, optional) &#x2014; The key with
      which to sort the resulting models. Possible values are
      &#x201C;last_modified&#x201D;, &#x201C;trending_score&#x201D;,
      &#x201C;created_at&#x201D;, &#x201C;downloads&#x201D; and
      &#x201C;likes&#x201D;.
    *  direction (Literal[-1] or int, optional) &#x2014; Direction in which to
      sort. The value -1 sorts by descending order while all other values sort
      by ascending order.
    *  limit (int, optional) &#x2014; The limit on the number of datasets
      fetched. Leaving this option to None fetches all datasets.
    *  expand (List[ExpandDatasetProperty_T], optional) &#x2014; List
      properties to return in the response. When used, only the properties in
      the list will be returned. This parameter cannot be used if full is
      passed. Possible values are "author", "cardData", "citation",
      "createdAt", "disabled", "description", "downloads", "downloadsAllTime",
      "gated", "lastModified", "likes", "paperswithcode_id", "private",
      "siblings", "sha", "tags", "trendingScore", "usedStorage" and
      "resourceGroup".
    *  full (bool, optional) &#x2014; Whether to fetch all dataset data,
      including the last_modified, the card_data and the files. Can contain
      useful information such as the PapersWithCode ID.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
Iterable[DatasetInfo]
an iterable of huggingface_hub.hf_api.DatasetInfo objects.
List datasets hosted on the Huggingface Hub, given some filters.
Example usage with the filter argument:
Copied
>>> from huggingface_hub import HfApi

>>> api = HfApi()

# List all datasets
>>> api.list_datasets()


# List only the text classification datasets
>>> api.list_datasets(filter="task_categories:text-classification")


# List only the datasets in russian for language modeling
>>> api.list_datasets(
...     filter=("language:ru", "task_ids:language-modeling")
... )

# List FiftyOne datasets (identified by the tag "fiftyone" in dataset card)
>>> api.list_datasets(tags="fiftyone")
Example usage with the search argument:
Copied
>>> from huggingface_hub import HfApi

>>> api = HfApi()

# List all datasets with "text" in their name
>>> api.list_datasets(search="text")

# List all datasets with "text" in their name made by google
>>> api.list_datasets(search="text", author="google")
*** list_inference_endpoints ***
 <_source_>
( namespace: Optional[str] = None token: Union[bool, str, None] = None  ) â
ListInferenceEndpoint
Parameters
    *  namespace (str, optional) &#x2014; The namespace to list endpoints for.
      Defaults to the current user. Set to "*" to list all endpoints from all
      namespaces (i.e. personal namespace and all orgs the user belongs to).
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
ListInferenceEndpoint
A list of all inference endpoints for the given namespace.
Lists all inference endpoints for the given namespace.
Example:
Copied
>>> from huggingface_hub import HfApi
>>> api = HfApi()
>>> api.list_inference_endpoints()
[InferenceEndpoint(name=&#x27;my-endpoint&#x27;, ...), ...]
*** list_liked_repos ***
 <_source_>
( user: Optional[str] = None token: Union[bool, str, None] = None  ) â
UserLikes
Parameters
    *  user (str, optional) &#x2014; Name of the user for which you want to
      fetch the likes.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
UserLikes
object containing the user name and 3 lists of repo ids (1 for models, 1 for
datasets and 1 for Spaces).
Raises
ValueError
    * ValueError â If user is not passed and no token found (either from
      argument or from machine).
List all public repos liked by a user on huggingface.co.
This list is public so token is optional. If user is not passed, it defaults to
the logged in user.
See also unlike().
Example:
Copied
>>> from huggingface_hub import list_liked_repos

>>> likes = list_liked_repos("julien-c")

>>> likes.user
"julien-c"

>>> likes.models
["osanseviero/streamlit_1.15", "Xhaheen/ChatGPT_HF", ...]
*** list_models ***
 <_source_>
( filter: Union[str, Iterable[str], None] = None author: Optional[str] = None
gated: Optional[bool] = None inference: Optional[Literal['cold', 'frozen',
'warm']] = None library: Optional[Union[str, List[str]]] = None language:
Optional[Union[str, List[str]]] = None model_name: Optional[str] = None task:
Optional[Union[str, List[str]]] = None trained_dataset: Optional[Union[str,
List[str]]] = None tags: Optional[Union[str, List[str]]] = None search:
Optional[str] = None pipeline_tag: Optional[str] = None emissions_thresholds:
Optional[Tuple[float, float]] = None sort: Union[Literal['last_modified'], str,
None] = None direction: Optional[Literal[-1]] = None limit: Optional[int] =
None expand: Optional[List[ExpandModelProperty_T]] = None full: Optional[bool]
= None cardData: bool = False fetch_config: bool = False token: Union[bool,
str, None] = None  ) â
Iterable[ModelInfo]
Parameters
    *  filter (str or Iterable[str], optional) &#x2014; A string or list of
      string to filter models on the Hub.
    *  author (str, optional) &#x2014; A string which identify the author (user
      or organization) of the returned models.
    *  gated (bool, optional) &#x2014; A boolean to filter models on the Hub
      that are gated or not. By default, all models are returned. If gated=True
      is passed, only gated models are returned. If gated=False is passed, only
      non-gated models are returned.
    *  inference (Literal["cold", "frozen", "warm"], optional) &#x2014; A
      string to filter models on the Hub by their state on the Inference API.
      Warm models are available for immediate use. Cold models will be loaded
      on first inference call. Frozen models are not available in Inference
      API.
    *  library (str or List, optional) &#x2014; A string or list of strings of
      foundational libraries models were originally trained from, such as
      pytorch, tensorflow, or allennlp.
    *  language (str or List, optional) &#x2014; A string or list of strings of
      languages, both by name and country code, such as &#x201C;en&#x201D; or
      &#x201C;English&#x201D;
    *  model_name (str, optional) &#x2014; A string that contain complete or
      partial names for models on the Hub, such as &#x201C;bert&#x201D; or
      &#x201C;bert-base-cased&#x201D;
    *  task (str or List, optional) &#x2014; A string or list of strings of
      tasks models were designed for, such as: &#x201C;fill-mask&#x201D; or
      &#x201C;automatic-speech-recognition&#x201D;
    *  trained_dataset (str or List, optional) &#x2014; A string tag or a list
      of string tags of the trained dataset for a model on the Hub.
    *  tags (str or List, optional) &#x2014; A string tag or a list of tags to
      filter models on the Hub by, such as text-generation or spacy.
    *  search (str, optional) &#x2014; A string that will be contained in the
      returned model ids.
    *  pipeline_tag (str, optional) &#x2014; A string pipeline tag to filter
      models on the Hub by, such as summarization.
    *  emissions_thresholds (Tuple, optional) &#x2014; A tuple of two ints or
      floats representing a minimum and maximum carbon footprint to filter the
      resulting models with in grams.
    *  sort (Literal["last_modified"] or str, optional) &#x2014; The key with
      which to sort the resulting models. Possible values are
      &#x201C;last_modified&#x201D;, &#x201C;trending_score&#x201D;,
      &#x201C;created_at&#x201D;, &#x201C;downloads&#x201D; and
      &#x201C;likes&#x201D;.
    *  direction (Literal[-1] or int, optional) &#x2014; Direction in which to
      sort. The value -1 sorts by descending order while all other values sort
      by ascending order.
    *  limit (int, optional) &#x2014; The limit on the number of models
      fetched. Leaving this option to None fetches all models.
    *  expand (List[ExpandModelProperty_T], optional) &#x2014; List properties
      to return in the response. When used, only the properties in the list
      will be returned. This parameter cannot be used if full, cardData or
      fetch_config are passed. Possible values are "author", "baseModels",
      "cardData", "childrenModelCount", "config", "createdAt", "disabled",
      "downloads", "downloadsAllTime", "gated", "gguf", "inference",
      "inferenceProviderMapping", "lastModified", "library_name", "likes",
      "mask_token", "model-index", "pipeline_tag", "private", "safetensors",
      "sha", "siblings", "spaces", "tags", "transformersInfo", "trendingScore",
      "widgetData", "usedStorage" and "resourceGroup".
    *  full (bool, optional) &#x2014; Whether to fetch all model data,
      including the last_modified, the sha, the files and the tags. This is set
      to True by default when using a filter.
    *  cardData (bool, optional) &#x2014; Whether to grab the metadata for the
      model as well. Can contain useful information such as carbon emissions,
      metrics, and datasets trained on.
    *  fetch_config (bool, optional) &#x2014; Whether to fetch the model
      configs as well. This is not included in full due to its size.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
Iterable[ModelInfo]
an iterable of huggingface_hub.hf_api.ModelInfo objects.
List models hosted on the Huggingface Hub, given some filters.
Example usage with the filter argument:
Copied
>>> from huggingface_hub import HfApi

>>> api = HfApi()

# List all models
>>> api.list_models()

# List only the text classification models
>>> api.list_models(filter="text-classification")

# List only models from the AllenNLP library
>>> api.list_models(filter="allennlp")
Example usage with the search argument:
Copied
>>> from huggingface_hub import HfApi

>>> api = HfApi()

# List all models with "bert" in their name
>>> api.list_models(search="bert")

# List all models with "bert" in their name made by google
>>> api.list_models(search="bert", author="google")
*** list_organization_members ***
 <_source_>
( organization: str token: Union[bool, str, None] = None  ) â
Iterable[User]
Parameters
    *  organization (str) &#x2014; Name of the organization to get the members
      of.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
Iterable[User]
A list of User objects with the members of the organization.
Raises
HTTPError
    * HTTPError â HTTP 404 If the organization does not exist on the Hub.
List of members of an organization on the Hub.
*** list_papers ***
 <_source_>
( query: Optional[str] = None token: Union[bool, str, None] = None  ) â
Iterable[PaperInfo]
Parameters
    *  query (str, optional) &#x2014; A search query string to find papers. If
      provided, returns papers that match the query.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
Iterable[PaperInfo]
an iterable of huggingface_hub.hf_api.PaperInfo objects.
List daily papers on the Hugging Face Hub given a search query.
Example:
Copied
>>> from huggingface_hub import HfApi

>>> api = HfApi()

# List all papers with "attention" in their title
>>> api.list_papers(query="attention")
*** list_pending_access_requests ***
 <_source_>
( repo_id: str repo_type: Optional[str] = None token: Union[bool, str, None] =
None  ) â
List[AccessRequest]
Parameters
    *  repo_id (str) &#x2014; The id of the repo to get access requests for.
    *  repo_type (str, optional) &#x2014; The type of the repo to get access
      requests for. Must be one of model, dataset or space. Defaults to model.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
List[AccessRequest]
A list of AccessRequest objects. Each time contains a username, email, status
and timestamp attribute. If the gated repo has a custom form, the fields
attribute will be populated with userâs answers.
Raises
HTTPError
    * HTTPError â HTTP 400 if the repo is not gated.
    * HTTPError â HTTP 403 if you only have read-only access to the repo.
      This can be the case if you donât have write or admin role in the
      organization the repo belongs to or if you passed a read token.
Get pending access requests for a given gated repo.
A pending request means the user has requested access to the repo but the
request has not been processed yet. If the approval mode is automatic, this
list should be empty. Pending requests can be accepted or rejected using
accept_access_request() and reject_access_request().
For more info about gated repos, see https://huggingface.co/docs/hub/models-
gated.
Example:
Copied
>>> from huggingface_hub import list_pending_access_requests,
accept_access_request

# List pending requests
>>> requests = list_pending_access_requests("meta-llama/Llama-2-7b")
>>> len(requests)
411
>>> requests[0]
[
    AccessRequest(
        username=&#x27;clem&#x27;,
        fullname=&#x27;Clem ð¤&#x27;,
        email=&#x27;***&#x27;,
        timestamp=datetime.datetime(2023, 11, 23, 18, 4, 53, 828000,
tzinfo=datetime.timezone.utc),
        status=&#x27;pending&#x27;,
        fields=None,
    ),
    ...
]

# Accept Clem&#x27;s request
>>> accept_access_request("meta-llama/Llama-2-7b", "clem")
*** list_rejected_access_requests ***
 <_source_>
( repo_id: str repo_type: Optional[str] = None token: Union[bool, str, None] =
None  ) â
List[AccessRequest]
Parameters
    *  repo_id (str) &#x2014; The id of the repo to get access requests for.
    *  repo_type (str, optional) &#x2014; The type of the repo to get access
      requests for. Must be one of model, dataset or space. Defaults to model.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
List[AccessRequest]
A list of AccessRequest objects. Each time contains a username, email, status
and timestamp attribute. If the gated repo has a custom form, the fields
attribute will be populated with userâs answers.
Raises
HTTPError
    * HTTPError â HTTP 400 if the repo is not gated.
    * HTTPError â HTTP 403 if you only have read-only access to the repo.
      This can be the case if you donât have write or admin role in the
      organization the repo belongs to or if you passed a read token.
Get rejected access requests for a given gated repo.
A rejected request means the user has requested access to the repo and the
request has been explicitly rejected by a repo owner (either you or another
user from your organization). The user cannot download any file of the repo.
Rejected requests can be accepted or cancelled at any time using
accept_access_request() and cancel_access_request(). A cancelled request will
go back to the pending list while an accepted request will go to the accepted
list.
For more info about gated repos, see https://huggingface.co/docs/hub/models-
gated.
Example:
Copied
>>> from huggingface_hub import list_rejected_access_requests

>>> requests = list_rejected_access_requests("meta-llama/Llama-2-7b")
>>> len(requests)
411
>>> requests[0]
[
    AccessRequest(
        username=&#x27;clem&#x27;,
        fullname=&#x27;Clem ð¤&#x27;,
        email=&#x27;***&#x27;,
        timestamp=datetime.datetime(2023, 11, 23, 18, 4, 53, 828000,
tzinfo=datetime.timezone.utc),
        status=&#x27;rejected&#x27;,
        fields=None,
    ),
    ...
]
*** list_repo_commits ***
 <_source_>
( repo_id: str repo_type: Optional[str] = None token: Union[bool, str, None] =
None revision: Optional[str] = None formatted: bool = False  ) â
List[GitCommitInfo]
Parameters
    *  repo_id (str) &#x2014; A namespace (user or an organization) and a repo
      name separated by a /.
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if
      listing commits from a dataset or a Space, None or "model" if listing
      from a model. Default is None.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
    *  revision (str, optional) &#x2014; The git revision to commit from.
      Defaults to the head of the "main" branch.
    *  formatted (bool) &#x2014; Whether to return the HTML-formatted title and
      description of the commits. Defaults to False.
Returns
List[GitCommitInfo]
list of objects containing information about the commits for a repo on the Hub.
Raises
RepositoryNotFoundError or RevisionNotFoundError
    * RepositoryNotFoundError â If repository is not found (error 404): wrong
      repo_id/repo_type, private but not authenticated or repo does not exist.
    * RevisionNotFoundError â If revision is not found (error 404) on the
      repo.
Get the list of commits of a given revision for a repo on the Hub.
Commits are sorted by date (last commit first).
Example:
Copied
>>> from huggingface_hub import HfApi
>>> api = HfApi()

# Commits are sorted by date (last commit first)
>>> initial_commit = api.list_repo_commits("gpt2")[-1]

# Initial commit is always a system commit containing the `.gitattributes`
file.
>>> initial_commit
GitCommitInfo(
    commit_id=&#x27;9b865efde13a30c13e0a33e536cf3e4a5a9d71d8&#x27;,
    authors=[&#x27;system&#x27;],
    created_at=datetime.datetime(2019, 2, 18, 10, 36, 15,
tzinfo=datetime.timezone.utc),
    title=&#x27;initial commit&#x27;,
    message=&#x27;&#x27;,
    formatted_title=None,
    formatted_message=None
)

# Create an empty branch by deriving from initial commit
>>> api.create_branch("gpt2", "new_empty_branch",
revision=initial_commit.commit_id)
*** list_repo_files ***
 <_source_>
( repo_id: str revision: Optional[str] = None repo_type: Optional[str] = None
token: Union[str, bool, None] = None  ) â
List[str]
Parameters
    *  repo_id (str) &#x2014; A namespace (user or an organization) and a repo
      name separated by a /.
    *  revision (str, optional) &#x2014; The revision of the repository from
      which to get the information.
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if
      uploading to a dataset or space, None or "model" if uploading to a model.
      Default is None.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
List[str]
the list of files in a given repository.
Get the list of files in a given repo.
*** list_repo_likers ***
 <_source_>
( repo_id: str repo_type: Optional[str] = None token: Union[bool, str, None] =
None  ) â
Iterable[User]
Parameters
    *  repo_id (str) &#x2014; The repository to retrieve . Example: "user/my-
      cool-model".
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if
      uploading to a dataset or space, None or "model" if uploading to a model.
      Default is None.
Returns
Iterable[User]
an iterable of huggingface_hub.hf_api.User objects.
List all users who liked a given repo on the hugging Face Hub.
See also list_liked_repos().
*** list_repo_refs ***
 <_source_>
( repo_id: str repo_type: Optional[str] = None include_pull_requests: bool =
False token: Union[str, bool, None] = None  ) â
GitRefs
Parameters
    *  repo_id (str) &#x2014; A namespace (user or an organization) and a repo
      name separated by a /.
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if
      listing refs from a dataset or a Space, None or "model" if listing from a
      model. Default is None.
    *  include_pull_requests (bool, optional) &#x2014; Whether to include refs
      from pull requests in the list. Defaults to False.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
GitRefs
object containing all information about branches and tags for a repo on the
Hub.
Get the list of refs of a given repo (both tags and branches).
Example:
Copied
>>> from huggingface_hub import HfApi
>>> api = HfApi()
>>> api.list_repo_refs("gpt2")
GitRefs(branches=[GitRefInfo(name=&#x27;main&#x27;, ref=&#x27;refs/heads/
main&#x27;,
target_commit=&#x27;e7da7f221d5bf496a48136c0cd264e630fe9fcc8&#x27;)], converts=
[], tags=[])

>>> api.list_repo_refs("bigcode/the-stack", repo_type=&#x27;dataset&#x27;)
GitRefs(
    branches=[
        GitRefInfo(name=&#x27;main&#x27;, ref=&#x27;refs/heads/main&#x27;,
target_commit=&#x27;18edc1591d9ce72aa82f56c4431b3c969b210ae3&#x27;),
        GitRefInfo(name=&#x27;v1.1.a1&#x27;, ref=&#x27;refs/heads/
v1.1.a1&#x27;,
target_commit=&#x27;f9826b862d1567f3822d3d25649b0d6d22ace714&#x27;)
    ],
    converts=[],
    tags=[
        GitRefInfo(name=&#x27;v1.0&#x27;, ref=&#x27;refs/tags/v1.0&#x27;,
target_commit=&#x27;c37a8cd1e382064d8aced5e05543c5f7753834da&#x27;)
    ]
)
*** list_repo_tree ***
 <_source_>
( repo_id: str path_in_repo: Optional[str] = None recursive: bool = False
expand: bool = False revision: Optional[str] = None repo_type: Optional[str] =
None token: Union[str, bool, None] = None  ) â
Iterable[Union[RepoFile, RepoFolder]]
Parameters
    *  repo_id (str) &#x2014; A namespace (user or an organization) and a repo
      name separated by a /.
    *  path_in_repo (str, optional) &#x2014; Relative path of the tree (folder)
      in the repo, for example: "checkpoints/1fec34a/results". Will default to
      the root tree (folder) of the repository.
    *  recursive (bool, optional, defaults to False) &#x2014; Whether to list
      tree&#x2019;s files and folders recursively.
    *  expand (bool, optional, defaults to False) &#x2014; Whether to fetch
      more information about the tree&#x2019;s files and folders (e.g. last
      commit and files&#x2019; security scan results). This operation is more
      expensive for the server so only 50 results are returned per page
      (instead of 1000). As pagination is implemented in huggingface_hub, this
      is transparent for you except for the time it takes to get the results.
    *  revision (str, optional) &#x2014; The revision of the repository from
      which to get the tree. Defaults to "main" branch.
    *  repo_type (str, optional) &#x2014; The type of the repository from which
      to get the tree ("model", "dataset" or "space". Defaults to "model".
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
Iterable[Union[RepoFile, RepoFolder]]
The information about the treeâs files and folders, as an iterable of
RepoFile and RepoFolder objects. The order of the files and folders is not
guaranteed.
Raises
RepositoryNotFoundError or RevisionNotFoundError or EntryNotFoundError
    * RepositoryNotFoundError â If repository is not found (error 404): wrong
      repo_id/repo_type, private but not authenticated or repo does not exist.
    * RevisionNotFoundError â If revision is not found (error 404) on the
      repo.
    * EntryNotFoundError â If the tree (folder) does not exist (error 404) on
      the repo.
List a repo treeâs files and folders and get information about them.
Examples:
Get information about a repoâs tree.
Copied
>>> from huggingface_hub import list_repo_tree
>>> repo_tree = list_repo_tree("lysandre/arxiv-nlp")
>>> repo_tree
<generator object HfApi.list_repo_tree at 0x7fa4088e1ac0>
>>> list(repo_tree)
[
    RepoFile(path=&#x27;.gitattributes&#x27;, size=391,
blob_id=&#x27;ae8c63daedbd4206d7d40126955d4e6ab1c80f8f&#x27;, lfs=None,
last_commit=None, security=None),
    RepoFile(path=&#x27;README.md&#x27;, size=391,
blob_id=&#x27;43bd404b159de6fba7c2f4d3264347668d43af25&#x27;, lfs=None,
last_commit=None, security=None),
    RepoFile(path=&#x27;config.json&#x27;, size=554,
blob_id=&#x27;2f9618c3a19b9a61add74f70bfb121335aeef666&#x27;, lfs=None,
last_commit=None, security=None),
    RepoFile(
        path=&#x27;flax_model.msgpack&#x27;, size=497764107,
blob_id=&#x27;8095a62ccb4d806da7666fcda07467e2d150218e&#x27;,
        lfs={&#x27;size&#x27;: 497764107, &#x27;sha256&#x27;:
&#x27;d88b0d6a6ff9c3f8151f9d3228f57092aaea997f09af009eefd7373a77b5abb9&#x27;,
&#x27;pointer_size&#x27;: 134}, last_commit=None, security=None
    ),
    RepoFile(path=&#x27;merges.txt&#x27;, size=456318,
blob_id=&#x27;226b0752cac7789c48f0cb3ec53eda48b7be36cc&#x27;, lfs=None,
last_commit=None, security=None),
    RepoFile(
        path=&#x27;pytorch_model.bin&#x27;, size=548123560,
blob_id=&#x27;64eaa9c526867e404b68f2c5d66fd78e27026523&#x27;,
        lfs={&#x27;size&#x27;: 548123560, &#x27;sha256&#x27;:
&#x27;9be78edb5b928eba33aa88f431551348f7466ba9f5ef3daf1d552398722a5436&#x27;,
&#x27;pointer_size&#x27;: 134}, last_commit=None, security=None
    ),
    RepoFile(path=&#x27;vocab.json&#x27;, size=898669,
blob_id=&#x27;b00361fece0387ca34b4b8b8539ed830d644dbeb&#x27;, lfs=None,
last_commit=None, security=None)]
]
Get even more information about a repoâs tree (last commit and filesâ
security scan results)
Copied
>>> from huggingface_hub import list_repo_tree
>>> repo_tree = list_repo_tree("prompthero/openjourney-v4", expand=True)
>>> list(repo_tree)
[
    RepoFolder(
        path=&#x27;feature_extractor&#x27;,
        tree_id=&#x27;aa536c4ea18073388b5b0bc791057a7296a00398&#x27;,
        last_commit={
            &#x27;oid&#x27;:
&#x27;47b62b20b20e06b9de610e840282b7e6c3d51190&#x27;,
            &#x27;title&#x27;: &#x27;Upload diffusers weights (#48)&#x27;,
            &#x27;date&#x27;: datetime.datetime(2023, 3, 21, 9, 5, 27,
tzinfo=datetime.timezone.utc)
        }
    ),
    RepoFolder(
        path=&#x27;safety_checker&#x27;,
        tree_id=&#x27;65aef9d787e5557373fdf714d6c34d4fcdd70440&#x27;,
        last_commit={
            &#x27;oid&#x27;:
&#x27;47b62b20b20e06b9de610e840282b7e6c3d51190&#x27;,
            &#x27;title&#x27;: &#x27;Upload diffusers weights (#48)&#x27;,
            &#x27;date&#x27;: datetime.datetime(2023, 3, 21, 9, 5, 27,
tzinfo=datetime.timezone.utc)
        }
    ),
    RepoFile(
        path=&#x27;model_index.json&#x27;,
        size=582,
        blob_id=&#x27;d3d7c1e8c3e78eeb1640b8e2041ee256e24c9ee1&#x27;,
        lfs=None,
        last_commit={
            &#x27;oid&#x27;:
&#x27;b195ed2d503f3eb29637050a886d77bd81d35f0e&#x27;,
            &#x27;title&#x27;: &#x27;Fix deprecation warning by changing
`CLIPFeatureExtractor` to `CLIPImageProcessor`. (#54)&#x27;,
            &#x27;date&#x27;: datetime.datetime(2023, 5, 15, 21, 41, 59,
tzinfo=datetime.timezone.utc)
        },
        security={
            &#x27;safe&#x27;: True,
            &#x27;av_scan&#x27;: {&#x27;virusFound&#x27;: False,
&#x27;virusNames&#x27;: None},
            &#x27;pickle_import_scan&#x27;: None
        }
    )
    ...
]
*** list_spaces ***
 <_source_>
( filter: Union[str, Iterable[str], None] = None author: Optional[str] = None
search: Optional[str] = None datasets: Union[str, Iterable[str], None] = None
models: Union[str, Iterable[str], None] = None linked: bool = False sort: Union
[Literal['last_modified'], str, None] = None direction: Optional[Literal[-1]] =
None limit: Optional[int] = None expand: Optional[List[ExpandSpaceProperty_T]]
= None full: Optional[bool] = None token: Union[bool, str, None] = None  ) â
Iterable[SpaceInfo]
Parameters
    *  filter (str or Iterable, optional) &#x2014; A string tag or list of tags
      that can be used to identify Spaces on the Hub.
    *  author (str, optional) &#x2014; A string which identify the author of
      the returned Spaces.
    *  search (str, optional) &#x2014; A string that will be contained in the
      returned Spaces.
    *  datasets (str or Iterable, optional) &#x2014; Whether to return Spaces
      that make use of a dataset. The name of a specific dataset can be passed
      as a string.
    *  models (str or Iterable, optional) &#x2014; Whether to return Spaces
      that make use of a model. The name of a specific model can be passed as a
      string.
    *  linked (bool, optional) &#x2014; Whether to return Spaces that make use
      of either a model or a dataset.
    *  sort (Literal["last_modified"] or str, optional) &#x2014; The key with
      which to sort the resulting models. Possible values are
      &#x201C;last_modified&#x201D;, &#x201C;trending_score&#x201D;,
      &#x201C;created_at&#x201D; and &#x201C;likes&#x201D;.
    *  direction (Literal[-1] or int, optional) &#x2014; Direction in which to
      sort. The value -1 sorts by descending order while all other values sort
      by ascending order.
    *  limit (int, optional) &#x2014; The limit on the number of Spaces
      fetched. Leaving this option to None fetches all Spaces.
    *  expand (List[ExpandSpaceProperty_T], optional) &#x2014; List properties
      to return in the response. When used, only the properties in the list
      will be returned. This parameter cannot be used if full is passed.
      Possible values are "author", "cardData", "datasets", "disabled",
      "lastModified", "createdAt", "likes", "models", "private", "runtime",
      "sdk", "siblings", "sha", "subdomain", "tags", "trendingScore",
      "usedStorage" and "resourceGroup".
    *  full (bool, optional) &#x2014; Whether to fetch all Spaces data,
      including the last_modified, siblings and card_data fields.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
Iterable[SpaceInfo]
an iterable of huggingface_hub.hf_api.SpaceInfo objects.
List spaces hosted on the Huggingface Hub, given some filters.
*** list_user_followers ***
 <_source_>
( username: str token: Union[bool, str, None] = None  ) â
Iterable[User]
Parameters
    *  username (str) &#x2014; Username of the user to get the followers of.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
Iterable[User]
A list of User objects with the followers of the user.
Raises
HTTPError
    * HTTPError â HTTP 404 If the user does not exist on the Hub.
Get the list of followers of a user on the Hub.
*** list_user_following ***
 <_source_>
( username: str token: Union[bool, str, None] = None  ) â
Iterable[User]
Parameters
    *  username (str) &#x2014; Username of the user to get the users followed
      by.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
Iterable[User]
A list of User objects with the users followed by the user.
Raises
HTTPError
    * HTTPError â HTTP 404 If the user does not exist on the Hub.
Get the list of users followed by a user on the Hub.
*** list_webhooks ***
 <_source_>
( token: Union[bool, str, None] = None  ) â
List[WebhookInfo]
Parameters
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
List[WebhookInfo]
List of webhook info objects.
List all configured webhooks.
Example:
Copied
>>> from huggingface_hub import list_webhooks
>>> webhooks = list_webhooks()
>>> len(webhooks)
2
>>> webhooks[0]
WebhookInfo(
    id="654bbbc16f2ec14d77f109cc",
    watched=[WebhookWatchedItem(type="user", name="julien-c"),
WebhookWatchedItem(type="org", name="HuggingFaceH4")],
    url="https://webhook.site/a2176e82-5720-43ee-9e06-f91cb4c91548",
    secret="my-secret",
    domains=["repo", "discussion"],
    disabled=False,
)
*** merge_pull_request ***
 <_source_>
( repo_id: str discussion_num: int token: Union[bool, str, None] = None
comment: Optional[str] = None repo_type: Optional[str] = None  ) â
DiscussionStatusChange
Parameters
    *  repo_id (str) &#x2014; A namespace (user or an organization) and a repo
      name separated by a /.
    *  discussion_num (int) &#x2014; The number of the Discussion or Pull
      Request . Must be a strictly positive integer.
    *  comment (str, optional) &#x2014; An optional comment to post with the
      status change.
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if
      uploading to a dataset or space, None or "model" if uploading to a model.
      Default is None.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
DiscussionStatusChange
the status change event
Merges a Pull Request.
Raises the following errors:
    * HTTPError if the HuggingFace API returned an error
    * ValueError if some parameter value is invalid
    * RepositoryNotFoundError If the repository to download from cannot be
      found. This may be because it doesnât exist, or because it is set to
      private and you do not have access.
*** model_info ***
 <_source_>
( repo_id: str revision: Optional[str] = None timeout: Optional[float] = None
securityStatus: Optional[bool] = None files_metadata: bool = False expand:
Optional[List[ExpandModelProperty_T]] = None token: Union[bool, str, None] =
None  ) â
huggingface_hub.hf_api.ModelInfo
Parameters
    *  repo_id (str) &#x2014; A namespace (user or an organization) and a repo
      name separated by a /.
    *  revision (str, optional) &#x2014; The revision of the model repository
      from which to get the information.
    *  timeout (float, optional) &#x2014; Whether to set a timeout for the
      request to the Hub.
    *  securityStatus (bool, optional) &#x2014; Whether to retrieve the
      security status from the model repository as well. The security status
      will be returned in the security_repo_status field.
    *  files_metadata (bool, optional) &#x2014; Whether or not to retrieve
      metadata for files in the repository (size, LFS metadata, etc). Defaults
      to False.
    *  expand (List[ExpandModelProperty_T], optional) &#x2014; List properties
      to return in the response. When used, only the properties in the list
      will be returned. This parameter cannot be used if securityStatus or
      files_metadata are passed. Possible values are "author", "baseModels",
      "cardData", "childrenModelCount", "config", "createdAt", "disabled",
      "downloads", "downloadsAllTime", "gated", "gguf", "inference",
      "inferenceProviderMapping", "lastModified", "library_name", "likes",
      "mask_token", "model-index", "pipeline_tag", "private", "safetensors",
      "sha", "siblings", "spaces", "tags", "transformersInfo", "trendingScore",
      "widgetData", "usedStorage" and "resourceGroup".
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
huggingface_hub.hf_api.ModelInfo
The model repository information.
Get info on one specific model on huggingface.co
Model can be private if you pass an acceptable token or are logged in.
Raises the following errors:
    * RepositoryNotFoundError If the repository to download from cannot be
      found. This may be because it doesnât exist, or because it is set to
      private and you do not have access.
    * RevisionNotFoundError If the revision to download from cannot be found.
*** move_repo ***
 <_source_>
( from_id: str to_id: str repo_type: Optional[str] = None token: Union[str,
bool, None] = None  )
Parameters
    *  from_id (str) &#x2014; A namespace (user or an organization) and a repo
      name separated by a /. Original repository identifier.
    *  to_id (str) &#x2014; A namespace (user or an organization) and a repo
      name separated by a /. Final repository identifier.
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if
      uploading to a dataset or space, None or "model" if uploading to a model.
      Default is None.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Moving a repository from namespace1/repo_name1 to namespace2/repo_name2
Note there are certain limitations. For more information about moving
repositories, please see https://hf.co/docs/hub/repositories-settings#renaming-
or-transferring-a-repo.
Raises the following errors:
    * RepositoryNotFoundError If the repository to download from cannot be
      found. This may be because it doesnât exist, or because it is set to
      private and you do not have access.
*** paper_info ***
 <_source_>
( id: str  ) â
PaperInfo
Parameters
    *  id (str, optional) &#x2014; ArXiv id of the paper.
Returns
PaperInfo
A PaperInfo object.
Raises
HTTPError
    * HTTPError â HTTP 404 If the paper does not exist on the Hub.
Get information for a paper on the Hub.
*** parse_safetensors_file_metadata ***
 <_source_>
( repo_id: str filename: str repo_type: Optional[str] = None revision: Optional
[str] = None token: Union[bool, str, None] = None  ) â
SafetensorsFileMetadata
Parameters
    *  repo_id (str) &#x2014; A user or an organization name and a repo name
      separated by a /.
    *  filename (str) &#x2014; The name of the file in the repo.
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if the
      file is in a dataset or space, None or "model" if in a model. Default is
      None.
    *  revision (str, optional) &#x2014; The git revision to fetch the file
      from. Can be a branch name, a tag, or a commit hash. Defaults to the head
      of the "main" branch.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
SafetensorsFileMetadata
information related to a safetensors file.
Raises
NotASafetensorsRepoError or SafetensorsParsingError
    * NotASafetensorsRepoError â If the repo is not a safetensors repo i.e.
      doesnât have either a model.safetensors or a
      model.safetensors.index.json file.
    * SafetensorsParsingError â If a safetensors file header couldnât be
      parsed correctly.
Parse metadata from a safetensors file on the Hub.
To parse metadata from all safetensors files in a repo at once, use
get_safetensors_metadata().
For more details regarding the safetensors format, check out https://
huggingface.co/docs/safetensors/index#format.
*** pause_inference_endpoint ***
 <_source_>
( name: str namespace: Optional[str] = None token: Union[bool, str, None] =
None  ) â
InferenceEndpoint
Parameters
    *  name (str) &#x2014; The name of the Inference Endpoint to pause.
    *  namespace (str, optional) &#x2014; The namespace in which the Inference
      Endpoint is located. Defaults to the current user.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
InferenceEndpoint
information about the paused Inference Endpoint.
Pause an Inference Endpoint.
A paused Inference Endpoint will not be charged. It can be resumed at any time
using resume_inference_endpoint(). This is different than scaling the Inference
Endpoint to zero with scale_to_zero_inference_endpoint(), which would be
automatically restarted when a request is made to it.
For convenience, you can also pause an Inference Endpoint using
pause_inference_endpoint().
*** pause_space ***
 <_source_>
( repo_id: str token: Union[bool, str, None] = None  ) â
SpaceRuntime
Parameters
    *  repo_id (str) &#x2014; ID of the Space to pause. Example: "Salesforce/
      BLIP2".
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
SpaceRuntime
Runtime information about your Space including stage=PAUSED and requested
hardware.
Raises
RepositoryNotFoundError or HfHubHTTPError or BadRequestError
    * RepositoryNotFoundError â If your Space is not found (error 404). Most
      probably wrong repo_id or your space is private but you are not
      authenticated.
    * HfHubHTTPError â 403 Forbidden: only the owner of a Space can pause it.
      If you want to manage a Space that you donât own, either ask the owner
      by opening a Discussion or duplicate the Space.
    * BadRequestError â If your Space is a static Space. Static Spaces are
      always running and never billed. If you want to hide a static Space, you
      can set it to private.
Pause your Space.
A paused Space stops executing until manually restarted by its owner. This is
different from the sleeping state in which free Spaces go after 48h of
inactivity. Paused time is not billed to your account, no matter the hardware
youâve selected. To restart your Space, use restart_space() and go to your
Space settings page.
For more details, please visit the_docs.
*** preupload_lfs_files ***
 <_source_>
( repo_id: str additions: Iterable[CommitOperationAdd] token: Union[str, bool,
None] = None repo_type: Optional[str] = None revision: Optional[str] = None
create_pr: Optional[bool] = None num_threads: int = 5 free_memory: bool = True
gitignore_content: Optional[str] = None  )
Parameters
    *  repo_id (str) &#x2014; The repository in which you will commit the
      files, for example: "username/custom_transformers".
    *  operations (Iterable of CommitOperationAdd) &#x2014; The list of files
      to upload. Warning: the objects in this list will be mutated to include
      information relative to the upload. Do not reuse the same objects for
      multiple commits.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
    *  repo_type (str, optional) &#x2014; The type of repository to upload to
      (e.g. "model" -default-, "dataset" or "space").
    *  revision (str, optional) &#x2014; The git revision to commit from.
      Defaults to the head of the "main" branch.
    *  create_pr (boolean, optional) &#x2014; Whether or not you plan to create
      a Pull Request with that commit. Defaults to False.
    *  num_threads (int, optional) &#x2014; Number of concurrent threads for
      uploading files. Defaults to 5. Setting it to 2 means at most 2 files
      will be uploaded concurrently.
    *  gitignore_content (str, optional) &#x2014; The content of the .gitignore
      file to know which files should be ignored. The order of priority is to
      first check if gitignore_content is passed, then check if the .gitignore
      file is present in the list of files to commit and finally default to the
      .gitignore file already hosted on the Hub (if any).
Pre-upload LFS files to S3 in preparation on a future commit.
This method is useful if you are generating the files to upload on-the-fly and
you donât want to store them in memory before uploading them all at once.
This is a power-user method. You shouldnât need to call it directly to make a
normal commit. Use create_commit() directly instead.
Commit operations will be mutated during the process. In particular, the
attached path_or_fileobj will be removed after the upload to save memory (and
replaced by an empty bytes object). Do not reuse the same objects except to
pass them to create_commit(). If you donât want to remove the attached
content from the commit operation object, pass free_memory=False.
Example:
Copied
>>> from huggingface_hub import CommitOperationAdd, preupload_lfs_files,
create_commit, create_repo

>>> repo_id = create_repo("test_preupload").repo_id

# Generate and preupload LFS files one by one
>>> operations = [] # List of all `CommitOperationAdd` objects that will be
generated
>>> for i in range(5):
...     content = ... # generate binary content
...     addition = CommitOperationAdd(path_in_repo=f"shard_{i}_of_5.bin",
path_or_fileobj=content)
...     preupload_lfs_files(repo_id, additions=[addition]) # upload + free
memory
...     operations.append(addition)

# Create commit
>>> create_commit(repo_id, operations=operations, commit_message="Commit all
shards")
*** reject_access_request ***
 <_source_>
( repo_id: str user: str repo_type: Optional[str] = None rejection_reason:
Optional[str] token: Union[bool, str, None] = None  )
Parameters
    *  repo_id (str) &#x2014; The id of the repo to reject access request for.
    *  user (str) &#x2014; The username of the user which access request should
      be rejected.
    *  repo_type (str, optional) &#x2014; The type of the repo to reject access
      request for. Must be one of model, dataset or space. Defaults to model.
    *  rejection_reason (str, optional) &#x2014; Optional rejection reason that
      will be visible to the user (max 200 characters).
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Raises
HTTPError
    * HTTPError â HTTP 400 if the repo is not gated.
    * HTTPError â HTTP 403 if you only have read-only access to the repo.
      This can be the case if you donât have write or admin role in the
      organization the repo belongs to or if you passed a read token.
    * HTTPError â HTTP 404 if the user does not exist on the Hub.
    * HTTPError â HTTP 404 if the user access request cannot be found.
    * HTTPError â HTTP 404 if the user access request is already in the
      rejected list.
Reject an access request from a user for a given gated repo.
A rejected request will go to the rejected list. The user cannot download any
file of the repo. Rejected requests can be accepted or cancelled at any time
using accept_access_request() and cancel_access_request(). A cancelled request
will go back to the pending list while an accepted request will go to the
accepted list.
For more info about gated repos, see https://huggingface.co/docs/hub/models-
gated.
*** rename_discussion ***
 <_source_>
( repo_id: str discussion_num: int new_title: str token: Union[bool, str, None]
= None repo_type: Optional[str] = None  ) â
DiscussionTitleChange
Parameters
    *  repo_id (str) &#x2014; A namespace (user or an organization) and a repo
      name separated by a /.
    *  discussion_num (int) &#x2014; The number of the Discussion or Pull
      Request . Must be a strictly positive integer.
    *  new_title (str) &#x2014; The new title for the discussion
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if
      uploading to a dataset or space, None or "model" if uploading to a model.
      Default is None.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
DiscussionTitleChange
the title change event
Renames a Discussion.
Examples:
Copied
>>> new_title = "New title, fixing a typo"
>>> HfApi().rename_discussion(
...     repo_id="username/repo_name",
...     discussion_num=34
...     new_title=new_title
... )
# DiscussionTitleChange(id=&#x27;deadbeef0000000&#x27;, type=&#x27;title-
change&#x27;, ...)
Raises the following errors:
    * HTTPError if the HuggingFace API returned an error
    * ValueError if some parameter value is invalid
    * RepositoryNotFoundError If the repository to download from cannot be
      found. This may be because it doesnât exist, or because it is set to
      private and you do not have access.
*** repo_exists ***
 <_source_>
( repo_id: str repo_type: Optional[str] = None token: Union[str, bool, None] =
None  )
Parameters
    *  repo_id (str) &#x2014; A namespace (user or an organization) and a repo
      name separated by a /.
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if
      getting repository info from a dataset or a space, None or "model" if
      getting repository info from a model. Default is None.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Checks if a repository exists on the Hugging Face Hub.
Examples:
Copied
>>> from huggingface_hub import repo_exists
>>> repo_exists("google/gemma-7b")
True
>>> repo_exists("google/not-a-repo")
False
*** repo_info ***
 <_source_>
( repo_id: str revision: Optional[str] = None repo_type: Optional[str] = None
timeout: Optional[float] = None files_metadata: bool = False expand: Optional
[Union[ExpandModelProperty_T, ExpandDatasetProperty_T, ExpandSpaceProperty_T]]
= None token: Union[bool, str, None] = None  ) â
Union[SpaceInfo, DatasetInfo, ModelInfo]
Parameters
    *  repo_id (str) &#x2014; A namespace (user or an organization) and a repo
      name separated by a /.
    *  revision (str, optional) &#x2014; The revision of the repository from
      which to get the information.
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if
      getting repository info from a dataset or a space, None or "model" if
      getting repository info from a model. Default is None.
    *  timeout (float, optional) &#x2014; Whether to set a timeout for the
      request to the Hub.
    *  expand (ExpandModelProperty_T or ExpandDatasetProperty_T or
      ExpandSpaceProperty_T, optional) &#x2014; List properties to return in
      the response. When used, only the properties in the list will be
      returned. This parameter cannot be used if files_metadata is passed. For
      an exhaustive list of available properties, check out model_info(),
      dataset_info() or space_info().
    *  files_metadata (bool, optional) &#x2014; Whether or not to retrieve
      metadata for files in the repository (size, LFS metadata, etc). Defaults
      to False.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
Union[SpaceInfo, DatasetInfo, ModelInfo]
The repository information, as a huggingface_hub.hf_api.DatasetInfo,
huggingface_hub.hf_api.ModelInfo or huggingface_hub.hf_api.SpaceInfo object.
Get the info object for a given repo of a given type.
Raises the following errors:
    * RepositoryNotFoundError If the repository to download from cannot be
      found. This may be because it doesnât exist, or because it is set to
      private and you do not have access.
    * RevisionNotFoundError If the revision to download from cannot be found.
*** request_space_hardware ***
 <_source_>
( repo_id: str hardware: SpaceHardware token: Union[bool, str, None] = None
sleep_time: Optional[int] = None  ) â
SpaceRuntime
Parameters
    *  repo_id (str) &#x2014; ID of the repo to update. Example: "bigcode/in-
      the-stack".
    *  hardware (str or SpaceHardware) &#x2014; Hardware on which to run the
      Space. Example: "t4-medium".
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
    *  sleep_time (int, optional) &#x2014; Number of seconds of inactivity to
      wait before a Space is put to sleep. Set to -1 if you don&#x2019;t want
      your Space to sleep (default behavior for upgraded hardware). For free
      hardware, you can&#x2019;t configure the sleep time (value is fixed to 48
      hours of inactivity). See https://huggingface.co/docs/hub/spaces-
      gpus#sleep-time for more details.
Returns
SpaceRuntime
Runtime information about a Space including Space stage and hardware.
Request new hardware for a Space.
It is also possible to request hardware directly when creating the Space repo!
See create_repo() for details.
*** request_space_storage ***
 <_source_>
( repo_id: str storage: SpaceStorage token: Union[bool, str, None] = None  )
â
SpaceRuntime
Parameters
    *  repo_id (str) &#x2014; ID of the Space to update. Example: "open-llm-
      leaderboard/open_llm_leaderboard".
    *  storage (str or SpaceStorage) &#x2014; Storage tier. Either
      &#x2018;small&#x2019;, &#x2018;medium&#x2019;, or &#x2018;large&#x2019;.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
SpaceRuntime
Runtime information about a Space including Space stage and hardware.
Request persistent storage for a Space.
It is not possible to decrease persistent storage after its granted. To do so,
you must delete it via delete_space_storage().
*** restart_space ***
 <_source_>
( repo_id: str token: Union[bool, str, None] = None factory_reboot: bool =
False  ) â
SpaceRuntime
Parameters
    *  repo_id (str) &#x2014; ID of the Space to restart. Example: "Salesforce/
      BLIP2".
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
    *  factory_reboot (bool, optional) &#x2014; If True, the Space will be
      rebuilt from scratch without caching any requirements.
Returns
SpaceRuntime
Runtime information about your Space.
Raises
RepositoryNotFoundError or HfHubHTTPError or BadRequestError
    * RepositoryNotFoundError â If your Space is not found (error 404). Most
      probably wrong repo_id or your space is private but you are not
      authenticated.
    * HfHubHTTPError â 403 Forbidden: only the owner of a Space can restart
      it. If you want to restart a Space that you donât own, either ask the
      owner by opening a Discussion or duplicate the Space.
    * BadRequestError â If your Space is a static Space. Static Spaces are
      always running and never billed. If you want to hide a static Space, you
      can set it to private.
Restart your Space.
This is the only way to programmatically restart a Space if youâve put it on
Pause (see pause_space()). You must be the owner of the Space to restart it. If
you are using an upgraded hardware, your account will be billed as soon as the
Space is restarted. You can trigger a restart no matter the current state of a
Space.
For more details, please visit the_docs.
*** resume_inference_endpoint ***
 <_source_>
( name: str namespace: Optional[str] = None running_ok: bool = True token:
Union[bool, str, None] = None  ) â
InferenceEndpoint
Parameters
    *  name (str) &#x2014; The name of the Inference Endpoint to resume.
    *  namespace (str, optional) &#x2014; The namespace in which the Inference
      Endpoint is located. Defaults to the current user.
    *  running_ok (bool, optional) &#x2014; If True, the method will not raise
      an error if the Inference Endpoint is already running. Defaults to True.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
InferenceEndpoint
information about the resumed Inference Endpoint.
Resume an Inference Endpoint.
For convenience, you can also resume an Inference Endpoint using
InferenceEndpoint.resume().
*** revision_exists ***
 <_source_>
( repo_id: str revision: str repo_type: Optional[str] = None token: Union[str,
bool, None] = None  )
Parameters
    *  repo_id (str) &#x2014; A namespace (user or an organization) and a repo
      name separated by a /.
    *  revision (str) &#x2014; The revision of the repository to check.
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if
      getting repository info from a dataset or a space, None or "model" if
      getting repository info from a model. Default is None.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Checks if a specific revision exists on a repo on the Hugging Face Hub.
Examples:
Copied
>>> from huggingface_hub import revision_exists
>>> revision_exists("google/gemma-7b", "float16")
True
>>> revision_exists("google/gemma-7b", "not-a-revision")
False
*** run_as_future ***
 <_source_>
( fn: Callable[..., R] *args **kwargs  ) â
Future
Parameters
    *  fn (Callable) &#x2014; The method to run in the background.
    *  *args, **kwargs &#x2014; Arguments with which the method will be called.
Returns
Future
a Future instance to get the result of the task.
Run a method in the background and return a Future instance.
The main goal is to run methods without blocking the main thread (e.g. to push
data during a training). Background jobs are queued to preserve order but are
not ran in parallel. If you need to speed-up your scripts by parallelizing lots
of call to the API, you must setup and use your own ThreadPoolExecutor.
Note: Most-used methods like upload_file(), upload_folder() and create_commit()
have a run_as_future: bool argument to directly call them in the background.
This is equivalent to calling api.run_as_future(...) on them but less verbose.
Example:
Copied
>>> from huggingface_hub import HfApi
>>> api = HfApi()
>>> future = api.run_as_future(api.whoami) # instant
>>> future.done()
False
>>> future.result() # wait until complete and return result
(...)
>>> future.done()
True
*** scale_to_zero_inference_endpoint ***
 <_source_>
( name: str namespace: Optional[str] = None token: Union[bool, str, None] =
None  ) â
InferenceEndpoint
Parameters
    *  name (str) &#x2014; The name of the Inference Endpoint to scale to zero.
    *  namespace (str, optional) &#x2014; The namespace in which the Inference
      Endpoint is located. Defaults to the current user.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
InferenceEndpoint
information about the scaled-to-zero Inference Endpoint.
Scale Inference Endpoint to zero.
An Inference Endpoint scaled to zero will not be charged. It will be resume on
the next request to it, with a cold start delay. This is different than pausing
the Inference Endpoint with pause_inference_endpoint(), which would require a
manual resume with resume_inference_endpoint().
For convenience, you can also scale an Inference Endpoint to zero using
InferenceEndpoint.scale_to_zero().
*** set_space_sleep_time ***
 <_source_>
( repo_id: str sleep_time: int token: Union[bool, str, None] = None  ) â
SpaceRuntime
Parameters
    *  repo_id (str) &#x2014; ID of the repo to update. Example: "bigcode/in-
      the-stack".
    *  sleep_time (int, optional) &#x2014; Number of seconds of inactivity to
      wait before a Space is put to sleep. Set to -1 if you don&#x2019;t want
      your Space to pause (default behavior for upgraded hardware). For free
      hardware, you can&#x2019;t configure the sleep time (value is fixed to 48
      hours of inactivity). See https://huggingface.co/docs/hub/spaces-
      gpus#sleep-time for more details.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
SpaceRuntime
Runtime information about a Space including Space stage and hardware.
Set a custom sleep time for a Space running on upgraded hardware..
Your Space will go to sleep after X seconds of inactivity. You are not billed
when your Space is in âsleepâ mode. If a new visitor lands on your Space,
it will âwake it upâ. Only upgraded hardware can have a configurable sleep
time. To know more about the sleep stage, please refer to https://
huggingface.co/docs/hub/spaces-gpus#sleep-time.
It is also possible to set a custom sleep time when requesting hardware with
request_space_hardware().
*** snapshot_download ***
 <_source_>
( repo_id: str repo_type: Optional[str] = None revision: Optional[str] = None
cache_dir: Union[str, Path, None] = None local_dir: Union[str, Path, None] =
None proxies: Optional[Dict] = None etag_timeout: float = 10 force_download:
bool = False token: Union[bool, str, None] = None local_files_only: bool =
False allow_patterns: Optional[Union[List[str], str]] = None ignore_patterns:
Optional[Union[List[str], str]] = None max_workers: int = 8 tqdm_class:
Optional[base_tqdm] = None local_dir_use_symlinks: Union[bool, Literal['auto']]
= 'auto' resume_download: Optional[bool] = None  ) â
str
Parameters
    *  repo_id (str) &#x2014; A user or an organization name and a repo name
      separated by a /.
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if
      downloading from a dataset or space, None or "model" if downloading from
      a model. Default is None.
    *  revision (str, optional) &#x2014; An optional Git revision id which can
      be a branch name, a tag, or a commit hash.
    *  cache_dir (str, Path, optional) &#x2014; Path to the folder where cached
      files are stored.
    *  local_dir (str or Path, optional) &#x2014; If provided, the downloaded
      files will be placed under this directory.
    *  proxies (dict, optional) &#x2014; Dictionary mapping protocol to the URL
      of the proxy passed to requests.request.
    *  etag_timeout (float, optional, defaults to 10) &#x2014; When fetching
      ETag, how many seconds to wait for the server to send data before giving
      up which is passed to requests.request.
    *  force_download (bool, optional, defaults to False) &#x2014; Whether the
      file should be downloaded even if it already exists in the local cache.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
    *  local_files_only (bool, optional, defaults to False) &#x2014; If True,
      avoid downloading the file and return the path to the local cached file
      if it exists.
    *  allow_patterns (List[str] or str, optional) &#x2014; If provided, only
      files matching at least one pattern are downloaded.
    *  ignore_patterns (List[str] or str, optional) &#x2014; If provided, files
      matching any of the patterns are not downloaded.
    *  max_workers (int, optional) &#x2014; Number of concurrent threads to
      download files (1 thread = 1 file download). Defaults to 8.
    *  tqdm_class (tqdm, optional) &#x2014; If provided, overwrites the default
      behavior for the progress bar. Passed argument must inherit from
      tqdm.auto.tqdm or at least mimic its behavior. Note that the tqdm_class
      is not passed to each individual download. Defaults to the custom HF
      progress bar that can be disabled by setting HF_HUB_DISABLE_PROGRESS_BARS
      environment variable.
Returns
str
folder path of the repo snapshot.
Raises
RepositoryNotFoundError or RevisionNotFoundError or EnvironmentError or OSError
or ValueError
    * RepositoryNotFoundError â If the repository to download from cannot be
      found. This may be because it doesnât exist, or because it is set to
      private and you do not have access.
    * RevisionNotFoundError â If the revision to download from cannot be
      found.
    * EnvironmentError â If token=True and the token cannot be found.
    * OSError â if ETag cannot be determined.
    * ValueError â if some parameter value is invalid.
Download repo files.
Download a whole snapshot of a repoâs files at the specified revision. This
is useful when you want all files from a repo, because you donât know which
ones you will need a priori. All files are nested inside a folder in order to
keep their actual filename relative to that folder. You can also filter which
files to download using allow_patterns and ignore_patterns.
If local_dir is provided, the file structure from the repo will be replicated
in this location. When using this option, the cache_dir will not be used and a
.cache/huggingface/ folder will be created at the root of local_dir to store
some metadata related to the downloaded files.While this mechanism is not as
robust as the main cache-system, itâs optimized for regularly pulling the
latest version of a repository.
An alternative would be to clone the repo but this requires git and git-lfs to
be installed and properly configured. It is also not possible to filter which
files to download when cloning a repository using git.
*** space_info ***
 <_source_>
( repo_id: str revision: Optional[str] = None timeout: Optional[float] = None
files_metadata: bool = False expand: Optional[List[ExpandSpaceProperty_T]] =
None token: Union[bool, str, None] = None  ) â
SpaceInfo
Parameters
    *  repo_id (str) &#x2014; A namespace (user or an organization) and a repo
      name separated by a /.
    *  revision (str, optional) &#x2014; The revision of the space repository
      from which to get the information.
    *  timeout (float, optional) &#x2014; Whether to set a timeout for the
      request to the Hub.
    *  files_metadata (bool, optional) &#x2014; Whether or not to retrieve
      metadata for files in the repository (size, LFS metadata, etc). Defaults
      to False.
    *  expand (List[ExpandSpaceProperty_T], optional) &#x2014; List properties
      to return in the response. When used, only the properties in the list
      will be returned. This parameter cannot be used if full is passed.
      Possible values are "author", "cardData", "createdAt", "datasets",
      "disabled", "lastModified", "likes", "models", "private", "runtime",
      "sdk", "siblings", "sha", "subdomain", "tags", "trendingScore",
      "usedStorage" and "resourceGroup".
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
SpaceInfo
The space repository information.
Get info on one specific Space on huggingface.co.
Space can be private if you pass an acceptable token.
Raises the following errors:
    * RepositoryNotFoundError If the repository to download from cannot be
      found. This may be because it doesnât exist, or because it is set to
      private and you do not have access.
    * RevisionNotFoundError If the revision to download from cannot be found.
*** super_squash_history ***
 <_source_>
( repo_id: str branch: Optional[str] = None commit_message: Optional[str] =
None repo_type: Optional[str] = None token: Union[str, bool, None] = None  )
Parameters
    *  repo_id (str) &#x2014; A namespace (user or an organization) and a repo
      name separated by a /.
    *  branch (str, optional) &#x2014; The branch to squash. Defaults to the
      head of the "main" branch.
    *  commit_message (str, optional) &#x2014; The commit message to use for
      the squashed commit.
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if
      listing commits from a dataset or a Space, None or "model" if listing
      from a model. Default is None.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Raises
RepositoryNotFoundError or RevisionNotFoundError or BadRequestError
    * RepositoryNotFoundError â If repository is not found (error 404): wrong
      repo_id/repo_type, private but not authenticated or repo does not exist.
    * RevisionNotFoundError â If the branch to squash cannot be found.
    * BadRequestError â If invalid reference for a branch. You cannot squash
      history on tags.
Squash commit history on a branch for a repo on the Hub.
Squashing the repo history is useful when you know youâll make hundreds of
commits and you donât want to clutter the history. Squashing commits can only
be performed from the head of a branch.
Once squashed, the commit history cannot be retrieved. This is a non-revertible
operation.
Once the history of a branch has been squashed, it is not possible to merge it
back into another branch since their history will have diverged.
Example:
Copied
>>> from huggingface_hub import HfApi
>>> api = HfApi()

# Create repo
>>> repo_id = api.create_repo("test-squash").repo_id

# Make a lot of commits.
>>> api.upload_file(repo_id=repo_id, path_in_repo="file.txt",
path_or_fileobj=b"content")
>>> api.upload_file(repo_id=repo_id, path_in_repo="lfs.bin",
path_or_fileobj=b"content")
>>> api.upload_file(repo_id=repo_id, path_in_repo="file.txt",
path_or_fileobj=b"another_content")

# Squash history
>>> api.super_squash_history(repo_id=repo_id)
*** unlike ***
 <_source_>
( repo_id: str token: Union[bool, str, None] = None repo_type: Optional[str] =
None  )
Parameters
    *  repo_id (str) &#x2014; The repository to unlike. Example: "user/my-cool-
      model".
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if
      unliking a dataset or space, None or "model" if unliking a model. Default
      is None.
Raises
RepositoryNotFoundError
    * RepositoryNotFoundError â If repository is not found (error 404): wrong
      repo_id/repo_type, private but not authenticated or repo does not exist.
Unlike a given repo on the Hub (e.g. remove from favorite list).
To prevent spam usage, it is not possible to like a repository from a script.
See also list_liked_repos().
Example:
Copied
>>> from huggingface_hub import list_liked_repos, unlike
>>> "gpt2" in list_liked_repos().models # we assume you have already liked gpt2
True
>>> unlike("gpt2")
>>> "gpt2" in list_liked_repos().models
False
*** update_collection_item ***
 <_source_>
( collection_slug: str item_object_id: str note: Optional[str] = None position:
Optional[int] = None token: Union[bool, str, None] = None  )
Parameters
    *  collection_slug (str) &#x2014; Slug of the collection to update.
      Example: "TheBloke/recent-models-64f9a55bb3115b4f513ec026".
    *  item_object_id (str) &#x2014; ID of the item in the collection. This is
      not the id of the item on the Hub (repo_id or paper id). It must be
      retrieved from a CollectionItem object. Example: collection.items
      [0].item_object_id.
    *  note (str, optional) &#x2014; A note to attach to the item in the
      collection. The maximum size for a note is 500 characters.
    *  position (int, optional) &#x2014; New position of the item in the
      collection.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Update an item in a collection.
Example:
Copied
>>> from huggingface_hub import get_collection, update_collection_item

# Get collection first
>>> collection = get_collection("TheBloke/recent-models-
64f9a55bb3115b4f513ec026")

# Update item based on its ID (add note + update position)
>>> update_collection_item(
...     collection_slug="TheBloke/recent-models-64f9a55bb3115b4f513ec026",
...     item_object_id=collection.items[-1].item_object_id,
...     note="Newly updated model!"
...     position=0,
... )
*** update_collection_metadata ***
 <_source_>
( collection_slug: str title: Optional[str] = None description: Optional[str] =
None position: Optional[int] = None private: Optional[bool] = None theme:
Optional[str] = None token: Union[bool, str, None] = None  )
Parameters
    *  collection_slug (str) &#x2014; Slug of the collection to update.
      Example: "TheBloke/recent-models-64f9a55bb3115b4f513ec026".
    *  title (str) &#x2014; Title of the collection to update.
    *  description (str, optional) &#x2014; Description of the collection to
      update.
    *  position (int, optional) &#x2014; New position of the collection in the
      list of collections of the user.
    *  private (bool, optional) &#x2014; Whether the collection should be
      private or not.
    *  theme (str, optional) &#x2014; Theme of the collection on the Hub.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Update metadata of a collection on the Hub.
All arguments are optional. Only provided metadata will be updated.
Returns: Collection
Example:
Copied
>>> from huggingface_hub import update_collection_metadata
>>> collection = update_collection_metadata(
...     collection_slug="username/iccv-2023-64f9a55bb3115b4f513ec026",
...     title="ICCV Oct. 2023"
...     description="Portfolio of models, datasets, papers and demos I
presented at ICCV Oct. 2023",
...     private=False,
...     theme="pink",
... )
>>> collection.slug
"username/iccv-oct-2023-64f9a55bb3115b4f513ec026"
# ^collection slug got updated but not the trailing ID
*** update_inference_endpoint ***
 <_source_>
( name: str accelerator: Optional[str] = None instance_size: Optional[str] =
None instance_type: Optional[str] = None min_replica: Optional[int] = None
max_replica: Optional[int] = None scale_to_zero_timeout: Optional[int] = None
repository: Optional[str] = None framework: Optional[str] = None revision:
Optional[str] = None task: Optional[str] = None custom_image: Optional[Dict] =
None secrets: Optional[Dict[str, str]] = None namespace: Optional[str] = None
token: Union[bool, str, None] = None  ) â
InferenceEndpoint
Parameters
    *  name (str) &#x2014; The name of the Inference Endpoint to update.
    *  accelerator (str, optional) &#x2014; The hardware accelerator to be used
      for inference (e.g. "cpu").
    *  instance_size (str, optional) &#x2014; The size or type of the instance
      to be used for hosting the model (e.g. "x4").
    *  instance_type (str, optional) &#x2014; The cloud instance type where the
      Inference Endpoint will be deployed (e.g. "intel-icl").
    *  min_replica (int, optional) &#x2014; The minimum number of replicas
      (instances) to keep running for the Inference Endpoint.
    *  max_replica (int, optional) &#x2014; The maximum number of replicas
      (instances) to scale to for the Inference Endpoint.
    *  scale_to_zero_timeout (int, optional) &#x2014; The duration in minutes
      before an inactive endpoint is scaled to zero.
    *  repository (str, optional) &#x2014; The name of the model repository
      associated with the Inference Endpoint (e.g. "gpt2").
    *  framework (str, optional) &#x2014; The machine learning framework used
      for the model (e.g. "custom").
    *  revision (str, optional) &#x2014; The specific model revision to deploy
      on the Inference Endpoint (e.g.
      "6c0e6080953db56375760c0471a8c5f2929baf11").
    *  task (str, optional) &#x2014; The task on which to deploy the model
      (e.g. "text-classification").
    *  custom_image (Dict, optional) &#x2014; A custom Docker image to use for
      the Inference Endpoint. This is useful if you want to deploy an Inference
      Endpoint running on the text-generation-inference (TGI) framework (see
      examples).
    *  secrets (Dict[str, str], optional) &#x2014; Secret values to inject in
      the container environment.
    *  namespace (str, optional) &#x2014; The namespace where the Inference
      Endpoint will be updated. Defaults to the current user&#x2019;s
      namespace.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
InferenceEndpoint
information about the updated Inference Endpoint.
Update an Inference Endpoint.
This method allows the update of either the compute configuration, the deployed
model, or both. All arguments are optional but at least one must be provided.
For convenience, you can also update an Inference Endpoint using
InferenceEndpoint.update().
*** update_repo_settings ***
 <_source_>
( repo_id: str gated: Optional[Literal['auto', 'manual', False]] = None
private: Optional[bool] = None token: Union[str, bool, None] = None repo_type:
Optional[str] = None  )
Parameters
    *  repo_id (str) &#x2014; A namespace (user or an organization) and a repo
      name separated by a /.
    *  gated (Literal["auto", "manual", False], optional) &#x2014; The gated
      status for the repository. If set to None (default), the gated setting of
      the repository won&#x2019;t be updated.
          o &#x201C;auto&#x201D;: The repository is gated, and access requests
            are automatically approved or denied based on predefined criteria.
          o &#x201C;manual&#x201D;: The repository is gated, and access
            requests require manual approval.
          o False : The repository is not gated, and anyone can access it.
    *  private (bool, optional) &#x2014; Whether the repository should be
      private.
    *  token (Union[str, bool, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
    *  repo_type (str, optional) &#x2014; The type of the repository to update
      settings from ("model", "dataset" or "space"). Defaults to "model".
Raises
ValueError or HfHubHTTPError or RepositoryNotFoundError
    * ValueError â If gated is not one of âautoâ, âmanualâ, or False.
    * ValueError â If repo_type is not one of the values in
      constants.REPO_TYPES.
    * HfHubHTTPError â If the request to the Hugging Face Hub API fails.
    * RepositoryNotFoundError â If the repository to download from cannot be
      found. This may be because it doesnât exist, or because it is set to
      private and you do not have access.
Update the settings of a repository, including gated access and visibility.
To give more control over how repos are used, the Hub allows repo authors to
enable access requests for their repos, and also to set the visibility of the
repo to private.
*** update_repo_visibility ***
 <_source_>
( repo_id: str private: bool = False token: Union[str, bool, None] = None
repo_type: Optional[str] = None  )
Parameters
    *  repo_id (str, optional) &#x2014; A namespace (user or an organization)
      and a repo name separated by a /.
    *  private (bool, optional, defaults to False) &#x2014; Whether the
      repository should be private.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if
      uploading to a dataset or space, None or "model" if uploading to a model.
      Default is None.
Update the visibility setting of a repository.
Deprecated. Use update_repo_settings instead.
Raises the following errors:
    * RepositoryNotFoundError If the repository to download from cannot be
      found. This may be because it doesnât exist, or because it is set to
      private and you do not have access.
*** update_webhook ***
 <_source_>
( webhook_id: str url: Optional[str] = None watched: Optional[List[Union[Dict,
WebhookWatchedItem]]] = None domains: Optional[List
[constants.WEBHOOK_DOMAIN_T]] = None secret: Optional[str] = None token: Union
[bool, str, None] = None  ) â
WebhookInfo
Parameters
    *  webhook_id (str) &#x2014; The unique identifier of the webhook to be
      updated.
    *  url (str, optional) &#x2014; The URL to which the payload will be sent.
    *  watched (List[WebhookWatchedItem], optional) &#x2014; List of items to
      watch. It can be users, orgs, models, datasets, or spaces. Refer to
      WebhookWatchedItem for more details. Watched items can also be provided
      as plain dictionaries.
    *  domains (List[Literal["repo", "discussion"]], optional) &#x2014; The
      domains to watch. This can include &#x201C;repo&#x201D;,
      &#x201C;discussion&#x201D;, or both.
    *  secret (str, optional) &#x2014; A secret to sign the payload with,
      providing an additional layer of security.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Returns
WebhookInfo
Info about the updated webhook.
Update an existing webhook.
Example:
Copied
>>> from huggingface_hub import update_webhook
>>> updated_payload = update_webhook(
...     webhook_id="654bbbc16f2ec14d77f109cc",
...     url="https://new.webhook.site/a2176e82-5720-43ee-9e06-f91cb4c91548",
...     watched=[{"type": "user", "name": "julien-c"}, {"type": "org", "name":
"HuggingFaceH4"}],
...     domains=["repo"],
...     secret="my-secret",
... )
>>> print(updated_payload)
WebhookInfo(
    id="654bbbc16f2ec14d77f109cc",
    url="https://new.webhook.site/a2176e82-5720-43ee-9e06-f91cb4c91548",
    watched=[WebhookWatchedItem(type="user", name="julien-c"),
WebhookWatchedItem(type="org", name="HuggingFaceH4")],
    domains=["repo"],
    secret="my-secret",
    disabled=False,
*** upload_file ***
 <_source_>
( path_or_fileobj: Union[str, Path, bytes, BinaryIO] path_in_repo: str repo_id:
str token: Union[str, bool, None] = None repo_type: Optional[str] = None
revision: Optional[str] = None commit_message: Optional[str] = None
commit_description: Optional[str] = None create_pr: Optional[bool] = None
parent_commit: Optional[str] = None run_as_future: bool = False  ) â
CommitInfo or Future
Parameters
    *  path_or_fileobj (str, Path, bytes, or IO) &#x2014; Path to a file on the
      local machine or binary data stream / fileobj / buffer.
    *  path_in_repo (str) &#x2014; Relative filepath in the repo, for example:
      "checkpoints/1fec34a/weights.bin"
    *  repo_id (str) &#x2014; The repository to which the file will be
      uploaded, for example: "username/custom_transformers"
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if
      uploading to a dataset or space, None or "model" if uploading to a model.
      Default is None.
    *  revision (str, optional) &#x2014; The git revision to commit from.
      Defaults to the head of the "main" branch.
    *  commit_message (str, optional) &#x2014; The summary / title / first line
      of the generated commit
    *  commit_description (str optional) &#x2014; The description of the
      generated commit
    *  create_pr (boolean, optional) &#x2014; Whether or not to create a Pull
      Request with that commit. Defaults to False. If revision is not set, PR
      is opened against the "main" branch. If revision is set and is a branch,
      PR is opened against this branch. If revision is set and is not a branch
      name (example: a commit oid), an RevisionNotFoundError is returned by the
      server.
    *  parent_commit (str, optional) &#x2014; The OID / SHA of the parent
      commit, as a hexadecimal string. Shorthands (7 first characters) are also
      supported. If specified and create_pr is False, the commit will fail if
      revision does not point to parent_commit. If specified and create_pr is
      True, the pull request will be created from parent_commit. Specifying
      parent_commit ensures the repo has not changed before committing the
      changes, and can be especially useful if the repo is updated / committed
      to concurrently.
    *  run_as_future (bool, optional) &#x2014; Whether or not to run this
      method in the background. Background jobs are run sequentially without
      blocking the main thread. Passing run_as_future=True will return a Future
      object. Defaults to False.
Returns
CommitInfo or Future
Instance of CommitInfo containing information about the newly created commit
(commit hash, commit url, pr url, commit message,â¦). If run_as_future=True is
passed, returns a Future object which will contain the result when executed.
Upload a local file (up to 50 GB) to the given repo. The upload is done through
a HTTP post request, and doesnât require git or git-lfs to be installed.
Raises the following errors:
    * HTTPError if the HuggingFace API returned an error
    * ValueError if some parameter value is invalid
    * RepositoryNotFoundError If the repository to download from cannot be
      found. This may be because it doesnât exist, or because it is set to
      private and you do not have access.
    * RevisionNotFoundError If the revision to download from cannot be found.
upload_file assumes that the repo already exists on the Hub. If you get a
Client error 404, please make sure you are authenticated and that repo_id and
repo_type are set correctly. If repo does not exist, create it first using
create_repo().
Example:
Copied
>>> from huggingface_hub import upload_file

>>> with open("./local/filepath", "rb") as fobj:
...     upload_file(
...         path_or_fileobj=fileobj,
...         path_in_repo="remote/file/path.h5",
...         repo_id="username/my-dataset",
...         repo_type="dataset",
...         token="my_token",
...     )
"https://huggingface.co/datasets/username/my-dataset/blob/main/remote/file/
path.h5"

>>> upload_file(
...     path_or_fileobj=".\\local\\file\\path",
...     path_in_repo="remote/file/path.h5",
...     repo_id="username/my-model",
...     token="my_token",
... )
"https://huggingface.co/username/my-model/blob/main/remote/file/path.h5"

>>> upload_file(
...     path_or_fileobj=".\\local\\file\\path",
...     path_in_repo="remote/file/path.h5",
...     repo_id="username/my-model",
...     token="my_token",
...     create_pr=True,
... )
"https://huggingface.co/username/my-model/blob/refs%2Fpr%2F1/remote/file/
path.h5"
*** upload_folder ***
 <_source_>
( repo_id: str folder_path: Union[str, Path] path_in_repo: Optional[str] = None
commit_message: Optional[str] = None commit_description: Optional[str] = None
token: Union[str, bool, None] = None repo_type: Optional[str] = None revision:
Optional[str] = None create_pr: Optional[bool] = None parent_commit: Optional
[str] = None allow_patterns: Optional[Union[List[str], str]] = None
ignore_patterns: Optional[Union[List[str], str]] = None delete_patterns:
Optional[Union[List[str], str]] = None run_as_future: bool = False  ) â
CommitInfo or Future
Parameters
    *  repo_id (str) &#x2014; The repository to which the file will be
      uploaded, for example: "username/custom_transformers"
    *  folder_path (str or Path) &#x2014; Path to the folder to upload on the
      local file system
    *  path_in_repo (str, optional) &#x2014; Relative path of the directory in
      the repo, for example: "checkpoints/1fec34a/results". Will default to the
      root folder of the repository.
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
    *  repo_type (str, optional) &#x2014; Set to "dataset" or "space" if
      uploading to a dataset or space, None or "model" if uploading to a model.
      Default is None.
    *  revision (str, optional) &#x2014; The git revision to commit from.
      Defaults to the head of the "main" branch.
    *  commit_message (str, optional) &#x2014; The summary / title / first line
      of the generated commit. Defaults to: f"Upload {path_in_repo} with
      huggingface_hub"
    *  commit_description (str optional) &#x2014; The description of the
      generated commit
    *  create_pr (boolean, optional) &#x2014; Whether or not to create a Pull
      Request with that commit. Defaults to False. If revision is not set, PR
      is opened against the "main" branch. If revision is set and is a branch,
      PR is opened against this branch. If revision is set and is not a branch
      name (example: a commit oid), an RevisionNotFoundError is returned by the
      server.
    *  parent_commit (str, optional) &#x2014; The OID / SHA of the parent
      commit, as a hexadecimal string. Shorthands (7 first characters) are also
      supported. If specified and create_pr is False, the commit will fail if
      revision does not point to parent_commit. If specified and create_pr is
      True, the pull request will be created from parent_commit. Specifying
      parent_commit ensures the repo has not changed before committing the
      changes, and can be especially useful if the repo is updated / committed
      to concurrently.
    *  allow_patterns (List[str] or str, optional) &#x2014; If provided, only
      files matching at least one pattern are uploaded.
    *  ignore_patterns (List[str] or str, optional) &#x2014; If provided, files
      matching any of the patterns are not uploaded.
    *  delete_patterns (List[str] or str, optional) &#x2014; If provided,
      remote files matching any of the patterns will be deleted from the repo
      while committing new files. This is useful if you don&#x2019;t know which
      files have already been uploaded. Note: to avoid discrepancies the
      .gitattributes file is not deleted even if it matches the pattern.
    *  run_as_future (bool, optional) &#x2014; Whether or not to run this
      method in the background. Background jobs are run sequentially without
      blocking the main thread. Passing run_as_future=True will return a Future
      object. Defaults to False.
Returns
CommitInfo or Future
Instance of CommitInfo containing information about the newly created commit
(commit hash, commit url, pr url, commit message,â¦). If run_as_future=True is
passed, returns a Future object which will contain the result when executed.
Upload a local folder to the given repo. The upload is done through a HTTP
requests, and doesnât require git or git-lfs to be installed.
The structure of the folder will be preserved. Files with the same name already
present in the repository will be overwritten. Others will be left untouched.
Use the allow_patterns and ignore_patterns arguments to specify which files to
upload. These parameters accept either a single pattern or a list of patterns.
Patterns are Standard Wildcards (globbing patterns) as documented here. If both
allow_patterns and ignore_patterns are provided, both constraints apply. By
default, all files from the folder are uploaded.
Use the delete_patterns argument to specify remote files you want to delete.
Input type is the same as for allow_patterns (see above). If path_in_repo is
also provided, the patterns are matched against paths relative to this folder.
For example, upload_folder(..., path_in_repo="experiment",
delete_patterns="logs/*") will delete any remote file under ./experiment/logs/.
Note that the .gitattributes file will not be deleted even if it matches the
patterns.
Any .git/ folder present in any subdirectory will be ignored. However, please
be aware that the .gitignore file is not taken into account.
Uses HfApi.create_commit under the hood.
Raises the following errors:
    * HTTPError if the HuggingFace API returned an error
    * ValueError if some parameter value is invalid
upload_folder assumes that the repo already exists on the Hub. If you get a
Client error 404, please make sure you are authenticated and that repo_id and
repo_type are set correctly. If repo does not exist, create it first using
create_repo().
When dealing with a large folder (thousands of files or hundreds of GB), we
recommend using upload_large_folder() instead.
Example:
Copied
# Upload checkpoints folder except the log files
>>> upload_folder(
...     folder_path="local/checkpoints",
...     path_in_repo="remote/experiment/checkpoints",
...     repo_id="username/my-dataset",
...     repo_type="datasets",
...     token="my_token",
...     ignore_patterns="**/logs/*.txt",
... )
# "https://huggingface.co/datasets/username/my-dataset/tree/main/remote/
experiment/checkpoints"

# Upload checkpoints folder including logs while deleting existing logs from
the repo
# Useful if you don&#x27;t know exactly which log files have already being
pushed
>>> upload_folder(
...     folder_path="local/checkpoints",
...     path_in_repo="remote/experiment/checkpoints",
...     repo_id="username/my-dataset",
...     repo_type="datasets",
...     token="my_token",
...     delete_patterns="**/logs/*.txt",
... )
"https://huggingface.co/datasets/username/my-dataset/tree/main/remote/
experiment/checkpoints"

# Upload checkpoints folder while creating a PR
>>> upload_folder(
...     folder_path="local/checkpoints",
...     path_in_repo="remote/experiment/checkpoints",
...     repo_id="username/my-dataset",
...     repo_type="datasets",
...     token="my_token",
...     create_pr=True,
... )
"https://huggingface.co/datasets/username/my-dataset/tree/refs%2Fpr%2F1/remote/
experiment/checkpoints"
*** upload_large_folder ***
 <_source_>
( repo_id: str folder_path: Union[str, Path] repo_type: str revision: Optional
[str] = None private: Optional[bool] = None allow_patterns: Optional[Union[List
[str], str]] = None ignore_patterns: Optional[Union[List[str], str]] = None
num_workers: Optional[int] = None print_report: bool = True print_report_every:
int = 60  )
Parameters
    *  repo_id (str) &#x2014; The repository to which the file will be
      uploaded. E.g. "HuggingFaceTB/smollm-corpus".
    *  folder_path (str or Path) &#x2014; Path to the folder to upload on the
      local file system.
    *  repo_type (str) &#x2014; Type of the repository. Must be one of "model",
      "dataset" or "space". Unlike in all other HfApi methods, repo_type is
      explicitly required here. This is to avoid any mistake when uploading a
      large folder to the Hub, and therefore prevent from having to re-upload
      everything.
    *  revision (str, optional) &#x2014; The branch to commit to. If not
      provided, the main branch will be used.
    *  private (bool, optional) &#x2014; Whether the repository should be
      private. If None (default), the repo will be public unless the
      organization&#x2019;s default is private.
    *  allow_patterns (List[str] or str, optional) &#x2014; If provided, only
      files matching at least one pattern are uploaded.
    *  ignore_patterns (List[str] or str, optional) &#x2014; If provided, files
      matching any of the patterns are not uploaded.
    *  num_workers (int, optional) &#x2014; Number of workers to start.
      Defaults to os.cpu_count() - 2 (minimum 2). A higher number of workers
      may speed up the process if your machine allows it. However, on machines
      with a slower connection, it is recommended to keep the number of workers
      low to ensure better resumability. Indeed, partially uploaded files will
      have to be completely re-uploaded if the process is interrupted.
    *  print_report (bool, optional) &#x2014; Whether to print a report of the
      upload progress. Defaults to True. Report is printed to sys.stdout every
      X seconds (60 by defaults) and overwrites the previous report.
    *  print_report_every (int, optional) &#x2014; Frequency at which the
      report is printed. Defaults to 60 seconds.
Upload a large folder to the Hub in the most resilient way possible.
Several workers are started to upload files in an optimized way. Before being
committed to a repo, files must be hashed and be pre-uploaded if they are LFS
files. Workers will perform these tasks for each file in the folder. At each
step, some metadata information about the upload process is saved in the folder
under .cache/.huggingface/ to be able to resume the process if interrupted. The
whole process might result in several commits.
A few things to keep in mind:
    * Repository limits still apply: https://huggingface.co/docs/hub/
      repositories-recommendations
    * Do not start several processes in parallel.
    * You can interrupt and resume the process at any time.
    * Do not upload the same folder to several repositories. If you need to do
      so, you must delete the local .cache/.huggingface/ folder first.
While being much more robust to upload large folders, upload_large_folder is
more limited than upload_folder() feature-wise. In practice:
    * you cannot set a custom path_in_repo. If you want to upload to a
      subfolder, you need to set the proper structure locally.
    * you cannot set a custom commit_message and commit_description since
      multiple commits are created.
    * you cannot delete from the repo while uploading. Please make a separate
      commit first.
    * you cannot create a PR directly. Please create a PR first (from the UI or
      using create_pull_request()) and then commit to it by passing revision.
Technical details:
upload_large_folder process is as follow:
   1. (Check parameters and setup.)
   2. Create repo if missing.
   3. List local files to upload.
   4. Start workers. Workers can perform the following tasks:
          o Hash a file.
          o Get upload mode (regular or LFS) for a list of files.
          o Pre-upload an LFS file.
          o Commit a bunch of files. Once a worker finishes a task, it will
            move on to the next task based on the priority list (see below)
            until all files are uploaded and committed.
   5. While workers are up, regularly print a report to sys.stdout.
Order of priority:
   1. Commit if more than 5 minutes since last commit attempt (and at least 1
      file).
   2. Commit if at least 150 files are ready to commit.
   3. Get upload mode if at least 10 files have been hashed.
   4. Pre-upload LFS file if at least 1 file and no worker is pre-uploading.
   5. Hash file if at least 1 file and no worker is hashing.
   6. Get upload mode if at least 1 file and no worker is getting upload mode.
   7. Pre-upload LFS file if at least 1 file (exception: if hf_transfer is
      enabled, only 1 worker can preupload LFS at a time).
   8. Hash file if at least 1 file to hash.
   9. Get upload mode if at least 1 file to get upload mode.
  10. Commit if at least 1 file to commit and at least 1 min since last commit
      attempt.
  11. Commit if at least 1 file to commit and all other queues are empty.
Special rules:
    * If hf_transfer is enabled, only 1 LFS uploader at a time. Otherwise the
      CPU would be bloated by hf_transfer.
    * Only one worker can commit at a time.
    * If no tasks are available, the worker waits for 10 seconds before
      checking again.
*** whoami ***
 <_source_>
( token: Union[bool, str, None] = None  )
Parameters
    *  token (Union[bool, str, None], optional) &#x2014; A valid user access
      token (string). Defaults to the locally saved token, which is the
      recommended method for authentication (see https://huggingface.co/docs/
      huggingface_hub/quick-start#authentication). To disable authentication,
      pass False.
Call HF API to know âwhoamiâ.
 API Dataclasses
 AccessRequest
**** class huggingface_hub.hf_api.AccessRequest ****
 <_source_>
( username: str fullname: str email: Optional[str] timestamp: datetime status:
Literal['pending', 'accepted', 'rejected'] fields: Optional[Dict[str, Any]] =
None  )
Parameters
    *  username (str) &#x2014; Username of the user who requested access.
    *  fullname (str) &#x2014; Fullname of the user who requested access.
    *  email (Optional[str]) &#x2014; Email of the user who requested access.
      Can only be None in the /accepted list if the user was granted access
      manually.
    *  timestamp (datetime) &#x2014; Timestamp of the request.
    *  status (Literal["pending", "accepted", "rejected"]) &#x2014; Status of
      the request. Can be one of ["pending", "accepted", "rejected"].
    *  fields (Dict[str, Any], optional) &#x2014; Additional fields filled by
      the user in the gate form.
Data structure containing information about a user access request.
 CommitInfo
**** class huggingface_hub.CommitInfo ****
 <_source_>
( *args commit_url: str _url: Optional[str] = None **kwargs  )
Parameters
    *  commit_url (str) &#x2014; Url where to find the commit.
    *  commit_message (str) &#x2014; The summary (first line) of the commit
      that has been created.
    *  commit_description (str) &#x2014; Description of the commit that has
      been created. Can be empty.
    *  oid (str) &#x2014; Commit hash id. Example:
      "91c54ad1727ee830252e457677f467be0bfd8a57".
    *  pr_url (str, optional) &#x2014; Url to the PR that has been created, if
      any. Populated when create_pr=True is passed.
    *  pr_revision (str, optional) &#x2014; Revision of the PR that has been
      created, if any. Populated when create_pr=True is passed. Example: "refs/
      pr/1".
    *  pr_num (int, optional) &#x2014; Number of the PR discussion that has
      been created, if any. Populated when create_pr=True is passed. Can be
      passed as discussion_num in get_discussion_details(). Example: 1.
    *  repo_url (RepoUrl) &#x2014; Repo URL of the commit containing info like
      repo_id, repo_type, etc.
    *  _url (str, optional) &#x2014; Legacy url for str compatibility. Can be
      the url to the uploaded file on the Hub (if returned by upload_file()),
      to the uploaded folder on the Hub (if returned by upload_folder()) or to
      the commit on the Hub (if returned by create_commit()). Defaults to
      commit_url. It is deprecated to use this attribute. Please use commit_url
      instead.
Data structure containing information about a newly created commit.
Returned by any method that creates a commit on the Hub: create_commit(),
upload_file(), upload_folder(), delete_file(), delete_folder(). It inherits
from str for backward compatibility but using methods specific to str is
deprecated.
 DatasetInfo
**** class huggingface_hub.DatasetInfo ****
 <_source_>
( **kwargs  )
Parameters
    *  id (str) &#x2014; ID of dataset.
    *  author (str) &#x2014; Author of the dataset.
    *  sha (str) &#x2014; Repo SHA at this particular revision.
    *  created_at (datetime, optional) &#x2014; Date of creation of the repo on
      the Hub. Note that the lowest value is 2022-03-02T23:29:04.000Z,
      corresponding to the date when we began to store creation dates.
    *  last_modified (datetime, optional) &#x2014; Date of last commit to the
      repo.
    *  private (bool) &#x2014; Is the repo private.
    *  disabled (bool, optional) &#x2014; Is the repo disabled.
    *  gated (Literal["auto", "manual", False], optional) &#x2014; Is the repo
      gated. If so, whether there is manual or automatic approval.
    *  downloads (int) &#x2014; Number of downloads of the dataset over the
      last 30 days.
    *  downloads_all_time (int) &#x2014; Cumulated number of downloads of the
      model since its creation.
    *  likes (int) &#x2014; Number of likes of the dataset.
    *  tags (List[str]) &#x2014; List of tags of the dataset.
    *  card_data (DatasetCardData, optional) &#x2014; Model Card Metadata as a
      huggingface_hub.repocard_data.DatasetCardData object.
    *  siblings (List[RepoSibling]) &#x2014; List of
      huggingface_hub.hf_api.RepoSibling objects that constitute the dataset.
    *  paperswithcode_id (str, optional) &#x2014; Papers with code ID of the
      dataset.
    *  trending_score (int, optional) &#x2014; Trending score of the dataset.
Contains information about a dataset on the Hub.
Most attributes of this class are optional. This is because the data returned
by the Hub depends on the query made. In general, the more specific the query,
the more information is returned. On the contrary, when listing datasets using
list_datasets() only a subset of the attributes are returned.
 GitRefInfo
**** class huggingface_hub.GitRefInfo ****
 <_source_>
( name: str ref: str target_commit: str  )
Parameters
    *  name (str) &#x2014; Name of the reference (e.g. tag name or branch
      name).
    *  ref (str) &#x2014; Full git ref on the Hub (e.g. "refs/heads/main" or
      "refs/tags/v1.0").
    *  target_commit (str) &#x2014; OID of the target commit for the ref (e.g.
      "e7da7f221d5bf496a48136c0cd264e630fe9fcc8")
Contains information about a git reference for a repo on the Hub.
 GitCommitInfo
**** class huggingface_hub.GitCommitInfo ****
 <_source_>
( commit_id: str authors: List[str] created_at: datetime title: str message:
str formatted_title: Optional[str] formatted_message: Optional[str]  )
Parameters
    *  commit_id (str) &#x2014; OID of the commit (e.g.
      "e7da7f221d5bf496a48136c0cd264e630fe9fcc8")
    *  authors (List[str]) &#x2014; List of authors of the commit.
    *  created_at (datetime) &#x2014; Datetime when the commit was created.
    *  title (str) &#x2014; Title of the commit. This is a free-text value
      entered by the authors.
    *  message (str) &#x2014; Description of the commit. This is a free-text
      value entered by the authors.
    *  formatted_title (str) &#x2014; Title of the commit formatted as HTML.
      Only returned if formatted=True is set.
    *  formatted_message (str) &#x2014; Description of the commit formatted as
      HTML. Only returned if formatted=True is set.
Contains information about a git commit for a repo on the Hub. Check out
list_repo_commits() for more details.
 GitRefs
**** class huggingface_hub.GitRefs ****
 <_source_>
( branches: List[GitRefInfo] converts: List[GitRefInfo] tags: List[GitRefInfo]
pull_requests: Optional[List[GitRefInfo]] = None  )
Parameters
    *  branches (List[GitRefInfo]) &#x2014; A list of GitRefInfo containing
      information about branches on the repo.
    *  converts (List[GitRefInfo]) &#x2014; A list of GitRefInfo containing
      information about &#x201C;convert&#x201D; refs on the repo. Converts are
      refs used (internally) to push preprocessed data in Dataset repos.
    *  tags (List[GitRefInfo]) &#x2014; A list of GitRefInfo containing
      information about tags on the repo.
    *  pull_requests (List[GitRefInfo], optional) &#x2014; A list of GitRefInfo
      containing information about pull requests on the repo. Only returned if
      include_prs=True is set.
Contains information about all git references for a repo on the Hub.
Object is returned by list_repo_refs().
 ModelInfo
**** class huggingface_hub.ModelInfo ****
 <_source_>
( **kwargs  )
Parameters
    *  id (str) &#x2014; ID of model.
    *  author (str, optional) &#x2014; Author of the model.
    *  sha (str, optional) &#x2014; Repo SHA at this particular revision.
    *  created_at (datetime, optional) &#x2014; Date of creation of the repo on
      the Hub. Note that the lowest value is 2022-03-02T23:29:04.000Z,
      corresponding to the date when we began to store creation dates.
    *  last_modified (datetime, optional) &#x2014; Date of last commit to the
      repo.
    *  private (bool) &#x2014; Is the repo private.
    *  disabled (bool, optional) &#x2014; Is the repo disabled.
    *  downloads (int) &#x2014; Number of downloads of the model over the last
      30 days.
    *  downloads_all_time (int) &#x2014; Cumulated number of downloads of the
      model since its creation.
    *  gated (Literal["auto", "manual", False], optional) &#x2014; Is the repo
      gated. If so, whether there is manual or automatic approval.
    *  gguf (Dict, optional) &#x2014; GGUF information of the model.
    *  inference (Literal["cold", "frozen", "warm"], optional) &#x2014; Status
      of the model on the inference API. Warm models are available for
      immediate use. Cold models will be loaded on first inference call. Frozen
      models are not available in Inference API.
    *  inference_provider_mapping (Dict, optional) &#x2014; Model&#x2019;s
      inference provider mapping.
    *  likes (int) &#x2014; Number of likes of the model.
    *  library_name (str, optional) &#x2014; Library associated with the model.
    *  tags (List[str]) &#x2014; List of tags of the model. Compared to
      card_data.tags, contains extra tags computed by the Hub (e.g. supported
      libraries, model&#x2019;s arXiv).
    *  pipeline_tag (str, optional) &#x2014; Pipeline tag associated with the
      model.
    *  mask_token (str, optional) &#x2014; Mask token used by the model.
    *  widget_data (Any, optional) &#x2014; Widget data associated with the
      model.
    *  model_index (Dict, optional) &#x2014; Model index for evaluation.
    *  config (Dict, optional) &#x2014; Model configuration.
    *  transformers_info (TransformersInfo, optional) &#x2014; Transformers-
      specific info (auto class, processor, etc.) associated with the model.
    *  trending_score (int, optional) &#x2014; Trending score of the model.
    *  card_data (ModelCardData, optional) &#x2014; Model Card Metadata as a
      huggingface_hub.repocard_data.ModelCardData object.
    *  siblings (List[RepoSibling]) &#x2014; List of
      huggingface_hub.hf_api.RepoSibling objects that constitute the model.
    *  spaces (List[str], optional) &#x2014; List of spaces using the model.
    *  safetensors (SafeTensorsInfo, optional) &#x2014; Model&#x2019;s
      safetensors information.
    *  security_repo_status (Dict, optional) &#x2014; Model&#x2019;s security
      scan status.
Contains information about a model on the Hub.
Most attributes of this class are optional. This is because the data returned
by the Hub depends on the query made. In general, the more specific the query,
the more information is returned. On the contrary, when listing models using
list_models() only a subset of the attributes are returned.
 RepoSibling
**** class huggingface_hub.hf_api.RepoSibling ****
 <_source_>
( rfilename: str size: Optional[int] = None blob_id: Optional[str] = None lfs:
Optional[BlobLfsInfo] = None  )
Parameters
    *  rfilename (str) &#x2014; file name, relative to the repo root.
    *  size (int, optional) &#x2014; The file&#x2019;s size, in bytes. This
      attribute is defined when files_metadata argument of repo_info() is set
      to True. It&#x2019;s None otherwise.
    *  blob_id (str, optional) &#x2014; The file&#x2019;s git OID. This
      attribute is defined when files_metadata argument of repo_info() is set
      to True. It&#x2019;s None otherwise.
    *  lfs (BlobLfsInfo, optional) &#x2014; The file&#x2019;s LFS metadata.
      This attribute is defined whenfiles_metadata argument of repo_info() is
      set to True and the file is stored with Git LFS. It&#x2019;s None
      otherwise.
Contains basic information about a repo file inside a repo on the Hub.
All attributes of this class are optional except rfilename. This is because
only the file names are returned when listing repositories on the Hub (with
list_models(), list_datasets() or list_spaces()). If you need more information
like file size, blob id or lfs details, you must request them specifically from
one repo at a time (using model_info(), dataset_info() or space_info()) as it
adds more constraints on the backend server to retrieve these.
 RepoFile
**** class huggingface_hub.hf_api.RepoFile ****
 <_source_>
( **kwargs  )
Parameters
    *  path (str) &#x2014; file path relative to the repo root.
    *  size (int) &#x2014; The file&#x2019;s size, in bytes.
    *  blob_id (str) &#x2014; The file&#x2019;s git OID.
    *  lfs (BlobLfsInfo) &#x2014; The file&#x2019;s LFS metadata.
    *  last_commit (LastCommitInfo, optional) &#x2014; The file&#x2019;s last
      commit metadata. Only defined if list_repo_tree() and get_paths_info()
      are called with expand=True.
    *  security (BlobSecurityInfo, optional) &#x2014; The file&#x2019;s
      security scan metadata. Only defined if list_repo_tree() and
      get_paths_info() are called with expand=True.
Contains information about a file on the Hub.
 RepoUrl
**** class huggingface_hub.RepoUrl ****
 <_source_>
( url: Any endpoint: Optional[str] = None  )
Parameters
    *  url (Any) &#x2014; String value of the repo url.
    *  endpoint (str, optional) &#x2014; Endpoint of the Hub. Defaults to
      https://huggingface.co.
Raises
ValueError
    * ValueError â If URL cannot be parsed.
    * ValueError â If repo_type is unknown.
Subclass of str describing a repo URL on the Hub.
RepoUrl is returned by HfApi.create_repo. It inherits from str for backward
compatibility. At initialization, the URL is parsed to populate properties:
    * endpoint (str)
    * namespace (Optional[str])
    * repo_name (str)
    * repo_id (str)
    * repo_type (Literal["model", "dataset", "space"])
    * url (str)
Example:
Copied
>>> RepoUrl(&#x27;https://huggingface.co/gpt2&#x27;)
RepoUrl(&#x27;https://huggingface.co/gpt2&#x27;, endpoint=&#x27;https://
huggingface.co&#x27;, repo_type=&#x27;model&#x27;, repo_id=&#x27;gpt2&#x27;)

>>> RepoUrl(&#x27;https://hub-ci.huggingface.co/datasets/dummy_user/
dummy_dataset&#x27;, endpoint=&#x27;https://hub-ci.huggingface.co&#x27;)
RepoUrl(&#x27;https://hub-ci.huggingface.co/datasets/dummy_user/
dummy_dataset&#x27;, endpoint=&#x27;https://hub-ci.huggingface.co&#x27;,
repo_type=&#x27;dataset&#x27;, repo_id=&#x27;dummy_user/dummy_dataset&#x27;)

>>> RepoUrl(&#x27;hf://datasets/my-user/my-dataset&#x27;)
RepoUrl(&#x27;hf://datasets/my-user/my-dataset&#x27;, endpoint=&#x27;https://
huggingface.co&#x27;, repo_type=&#x27;dataset&#x27;, repo_id=&#x27;user/
dataset&#x27;)

>>> HfApi.create_repo("dummy_model")
RepoUrl(&#x27;https://huggingface.co/Wauplin/dummy_model&#x27;,
endpoint=&#x27;https://huggingface.co&#x27;, repo_type=&#x27;model&#x27;,
repo_id=&#x27;Wauplin/dummy_model&#x27;)
 SafetensorsRepoMetadata
**** class huggingface_hub.utils.SafetensorsRepoMetadata ****
 <_source_>
( metadata: typing.Optional[typing.Dict] sharded: bool weight_map: typing.Dict
[str, str] files_metadata: typing.Dict[str,
huggingface_hub.utils._safetensors.SafetensorsFileMetadata]  )
Parameters
    *  metadata (Dict, optional) &#x2014; The metadata contained in the
      &#x2018;model.safetensors.index.json&#x2019; file, if it exists. Only
      populated for sharded models.
    *  sharded (bool) &#x2014; Whether the repo contains a sharded model or
      not.
    *  weight_map (Dict[str, str]) &#x2014; A map of all weights. Keys are
      tensor names and values are filenames of the files containing the
      tensors.
    *  files_metadata (Dict[str, SafetensorsFileMetadata]) &#x2014; A map of
      all files metadata. Keys are filenames and values are the metadata of the
      corresponding file, as a SafetensorsFileMetadata object.
    *  parameter_count (Dict[str, int]) &#x2014; A map of the number of
      parameters per data type. Keys are data types and values are the number
      of parameters of that data type.
Metadata for a Safetensors repo.
A repo is considered to be a Safetensors repo if it contains either a
âmodel.safetensorsâ weight file (non-shared model) or a
âmodel.safetensors.index.jsonâ index file (sharded model) at its root.
This class is returned by get_safetensors_metadata().
For more details regarding the safetensors format, check out https://
huggingface.co/docs/safetensors/index#format.
 SafetensorsFileMetadata
**** class huggingface_hub.utils.SafetensorsFileMetadata ****
 <_source_>
( metadata: typing.Dict[str, str] tensors: typing.Dict[str,
huggingface_hub.utils._safetensors.TensorInfo]  )
Parameters
    *  metadata (Dict) &#x2014; The metadata contained in the file.
    *  tensors (Dict[str, TensorInfo]) &#x2014; A map of all tensors. Keys are
      tensor names and values are information about the corresponding tensor,
      as a TensorInfo object.
    *  parameter_count (Dict[str, int]) &#x2014; A map of the number of
      parameters per data type. Keys are data types and values are the number
      of parameters of that data type.
Metadata for a Safetensors file hosted on the Hub.
This class is returned by parse_safetensors_file_metadata().
For more details regarding the safetensors format, check out https://
huggingface.co/docs/safetensors/index#format.
 SpaceInfo
**** class huggingface_hub.SpaceInfo ****
 <_source_>
( **kwargs  )
Parameters
    *  id (str) &#x2014; ID of the Space.
    *  author (str, optional) &#x2014; Author of the Space.
    *  sha (str, optional) &#x2014; Repo SHA at this particular revision.
    *  created_at (datetime, optional) &#x2014; Date of creation of the repo on
      the Hub. Note that the lowest value is 2022-03-02T23:29:04.000Z,
      corresponding to the date when we began to store creation dates.
    *  last_modified (datetime, optional) &#x2014; Date of last commit to the
      repo.
    *  private (bool) &#x2014; Is the repo private.
    *  gated (Literal["auto", "manual", False], optional) &#x2014; Is the repo
      gated. If so, whether there is manual or automatic approval.
    *  disabled (bool, optional) &#x2014; Is the Space disabled.
    *  host (str, optional) &#x2014; Host URL of the Space.
    *  subdomain (str, optional) &#x2014; Subdomain of the Space.
    *  likes (int) &#x2014; Number of likes of the Space.
    *  tags (List[str]) &#x2014; List of tags of the Space.
    *  siblings (List[RepoSibling]) &#x2014; List of
      huggingface_hub.hf_api.RepoSibling objects that constitute the Space.
    *  card_data (SpaceCardData, optional) &#x2014; Space Card Metadata as a
      huggingface_hub.repocard_data.SpaceCardData object.
    *  runtime (SpaceRuntime, optional) &#x2014; Space runtime information as a
      huggingface_hub.hf_api.SpaceRuntime object.
    *  sdk (str, optional) &#x2014; SDK used by the Space.
    *  models (List[str], optional) &#x2014; List of models used by the Space.
    *  datasets (List[str], optional) &#x2014; List of datasets used by the
      Space.
    *  trending_score (int, optional) &#x2014; Trending score of the Space.
Contains information about a Space on the Hub.
Most attributes of this class are optional. This is because the data returned
by the Hub depends on the query made. In general, the more specific the query,
the more information is returned. On the contrary, when listing spaces using
list_spaces() only a subset of the attributes are returned.
 TensorInfo
**** class huggingface_hub.utils.TensorInfo ****
 <_source_>
( dtype: typing.Literal['F64', 'F32', 'F16', 'BF16', 'I64', 'I32', 'I16', 'I8',
'U8', 'BOOL'] shape: typing.List[int] data_offsets: typing.Tuple[int, int]  )
Parameters
    *  dtype (str) &#x2014; The data type of the tensor (&#x201C;F64&#x201D;,
      &#x201C;F32&#x201D;, &#x201C;F16&#x201D;, &#x201C;BF16&#x201D;,
      &#x201C;I64&#x201D;, &#x201C;I32&#x201D;, &#x201C;I16&#x201D;,
      &#x201C;I8&#x201D;, &#x201C;U8&#x201D;, &#x201C;BOOL&#x201D;).
    *  shape (List[int]) &#x2014; The shape of the tensor.
    *  data_offsets (Tuple[int, int]) &#x2014; The offsets of the data in the
      file as a tuple [BEGIN, END].
    *  parameter_count (int) &#x2014; The number of parameters in the tensor.
Information about a tensor.
For more details regarding the safetensors format, check out https://
huggingface.co/docs/safetensors/index#format.
 User
**** class huggingface_hub.User ****
 <_source_>
( **kwargs  )
Parameters
    *  username (str) &#x2014; Name of the user on the Hub (unique).
    *  fullname (str) &#x2014; User&#x2019;s full name.
    *  avatar_url (str) &#x2014; URL of the user&#x2019;s avatar.
    *  details (str, optional) &#x2014; User&#x2019;s details.
    *  is_following (bool, optional) &#x2014; Whether the authenticated user is
      following this user.
    *  is_pro (bool, optional) &#x2014; Whether the user is a pro user.
    *  num_models (int, optional) &#x2014; Number of models created by the
      user.
    *  num_datasets (int, optional) &#x2014; Number of datasets created by the
      user.
    *  num_spaces (int, optional) &#x2014; Number of spaces created by the
      user.
    *  num_discussions (int, optional) &#x2014; Number of discussions initiated
      by the user.
    *  num_papers (int, optional) &#x2014; Number of papers authored by the
      user.
    *  num_upvotes (int, optional) &#x2014; Number of upvotes received by the
      user.
    *  num_likes (int, optional) &#x2014; Number of likes given by the user.
    *  num_following (int, optional) &#x2014; Number of users this user is
      following.
    *  num_followers (int, optional) &#x2014; Number of users following this
      user.
    *  orgs (list of Organization) &#x2014; List of organizations the user is
      part of.
Contains information about a user on the Hub.
 UserLikes
**** class huggingface_hub.UserLikes ****
 <_source_>
( user: str total: int datasets: List[str] models: List[str] spaces: List[str]
)
Parameters
    *  user (str) &#x2014; Name of the user for which we fetched the likes.
    *  total (int) &#x2014; Total number of likes.
    *  datasets (List[str]) &#x2014; List of datasets liked by the user (as
      repo_ids).
    *  models (List[str]) &#x2014; List of models liked by the user (as
      repo_ids).
    *  spaces (List[str]) &#x2014; List of spaces liked by the user (as
      repo_ids).
Contains information about a user likes on the Hub.
 WebhookInfo
**** class huggingface_hub.WebhookInfo ****
 <_source_>
( id: str url: str watched: List[WebhookWatchedItem] domains: List
[constants.WEBHOOK_DOMAIN_T] secret: Optional[str] disabled: bool  )
Parameters
    *  id (str) &#x2014; ID of the webhook.
    *  url (str) &#x2014; URL of the webhook.
    *  watched (List[WebhookWatchedItem]) &#x2014; List of items watched by the
      webhook, see WebhookWatchedItem.
    *  domains (List[WEBHOOK_DOMAIN_T]) &#x2014; List of domains the webhook is
      watching. Can be one of ["repo", "discussions"].
    *  secret (str, optional) &#x2014; Secret of the webhook.
    *  disabled (bool) &#x2014; Whether the webhook is disabled or not.
Data structure containing information about a webhook.
 WebhookWatchedItem
**** class huggingface_hub.WebhookWatchedItem ****
 <_source_>
( type: Literal['dataset', 'model', 'org', 'space', 'user'] name: str  )
Parameters
    *  type (Literal["dataset", "model", "org", "space", "user"]) &#x2014; Type
      of the item to be watched. Can be one of ["dataset", "model", "org",
      "space", "user"].
    *  name (str) &#x2014; Name of the item to be watched. Can be the username,
      organization name, model name, dataset name or space name.
Data structure containing information about the items watched by a webhook.
 CommitOperation
Below are the supported values for CommitOperation():
**** class huggingface_hub.CommitOperationAdd ****
 <_source_>
( path_in_repo: str path_or_fileobj: typing.Union[str, pathlib.Path, bytes,
typing.BinaryIO]  )
Parameters
    *  path_in_repo (str) &#x2014; Relative filepath in the repo, for example:
      "checkpoints/1fec34a/weights.bin"
    *  path_or_fileobj (str, Path, bytes, or BinaryIO) &#x2014; Either:
          o a path to a local file (as str or pathlib.Path) to upload
          o a buffer of bytes (bytes) holding the content of the file to upload
          o a &#x201C;file object&#x201D; (subclass of io.BufferedIOBase),
            typically obtained with open(path, "rb"). It must support seek()
            and tell() methods.
Raises
ValueError
    * ValueError â If path_or_fileobj is not one of str, Path, bytes or
      io.BufferedIOBase.
    * ValueError â If path_or_fileobj is a str or Path but not a path to an
      existing file.
    * ValueError â If path_or_fileobj is a io.BufferedIOBase but it doesnât
      support both seek() and tell().
Data structure holding necessary info to upload a file to a repository on the
Hub.
*** as_file ***
 <_source_>
( with_tqdm: bool = False  )
Parameters
    *  with_tqdm (bool, optional, defaults to False) &#x2014; If True,
      iterating over the file object will display a progress bar. Only works if
      the file-like object is a path to a file. Pure bytes and buffers are not
      supported.
A context manager that yields a file-like object allowing to read the
underlying data behind path_or_fileobj.
Example:
Copied
>>> operation = CommitOperationAdd(
...        path_in_repo="remote/dir/weights.h5",
...        path_or_fileobj="./local/weights.h5",
... )
CommitOperationAdd(path_in_repo=&#x27;remote/dir/weights.h5&#x27;,
path_or_fileobj=&#x27;./local/weights.h5&#x27;)

>>> with operation.as_file() as file:
...     content = file.read()

>>> with operation.as_file(with_tqdm=True) as file:
...     while True:
...         data = file.read(1024)
...         if not data:
...              break
config.json:
100%|âââââââââââââââââââââââââ|
8.19k/8.19k [00:02<00:00, 3.72kB/s]

>>> with operation.as_file(with_tqdm=True) as file:
...     requests.put(..., data=file)
config.json:
100%|âââââââââââââââââââââââââ|
8.19k/8.19k [00:02<00:00, 3.72kB/s]
*** b64content ***
 <_source_>
( )
The base64-encoded content of path_or_fileobj
Returns: bytes
**** class huggingface_hub.CommitOperationDelete ****
 <_source_>
( path_in_repo: str is_folder: typing.Union[bool, typing.Literal['auto']] =
'auto'  )
Parameters
    *  path_in_repo (str) &#x2014; Relative filepath in the repo, for example:
      "checkpoints/1fec34a/weights.bin" for a file or "checkpoints/1fec34a/
      " for a folder.
    *  is_folder (bool or Literal["auto"], optional) &#x2014; Whether the
      Delete Operation applies to a folder or not. If &#x201C;auto&#x201D;, the
      path type (file or folder) is guessed automatically by looking if path
      ends with a &#x201D;/&#x201D; (folder) or not (file). To explicitly set
      the path type, you can set is_folder=True or is_folder=False.
Data structure holding necessary info to delete a file or a folder from a
repository on the Hub.
**** class huggingface_hub.CommitOperationCopy ****
 <_source_>
( src_path_in_repo: str path_in_repo: str src_revision: typing.Optional[str] =
None _src_oid: typing.Optional[str] = None _dest_oid: typing.Optional[str] =
None  )
Parameters
    *  src_path_in_repo (str) &#x2014; Relative filepath in the repo of the
      file to be copied, e.g. "checkpoints/1fec34a/weights.bin".
    *  path_in_repo (str) &#x2014; Relative filepath in the repo where to copy
      the file, e.g. "checkpoints/1fec34a/weights_copy.bin".
    *  src_revision (str, optional) &#x2014; The git revision of the file to be
      copied. Can be any valid git revision. Default to the target commit
      revision.
Data structure holding necessary info to copy a file in a repository on the
Hub.
Limitations:
    * Only LFS files can be copied. To copy a regular file, you need to
      download it locally and re-upload it
    * Cross-repository copies are not supported.
Note: you can combine a CommitOperationCopy and a CommitOperationDelete to
rename an LFS file on the Hub.
 CommitScheduler
**** class huggingface_hub.CommitScheduler ****
 <_source_>
( repo_id: str folder_path: typing.Union[str, pathlib.Path] every: typing.Union
[int, float] = 5 path_in_repo: typing.Optional[str] = None repo_type:
typing.Optional[str] = None revision: typing.Optional[str] = None private:
typing.Optional[bool] = None token: typing.Optional[str] = None allow_patterns:
typing.Union[typing.List[str], str, NoneType] = None ignore_patterns:
typing.Union[typing.List[str], str, NoneType] = None squash_history: bool =
False hf_api: typing.Optional[ForwardRef('HfApi')] = None  )
Parameters
    *  repo_id (str) &#x2014; The id of the repo to commit to.
    *  folder_path (str or Path) &#x2014; Path to the local folder to upload
      regularly.
    *  every (int or float, optional) &#x2014; The number of minutes between
      each commit. Defaults to 5 minutes.
    *  path_in_repo (str, optional) &#x2014; Relative path of the directory in
      the repo, for example: "checkpoints/". Defaults to the root folder of the
      repository.
    *  repo_type (str, optional) &#x2014; The type of the repo to commit to.
      Defaults to model.
    *  revision (str, optional) &#x2014; The revision of the repo to commit to.
      Defaults to main.
    *  private (bool, optional) &#x2014; Whether to make the repo private. If
      None (default), the repo will be public unless the organization&#x2019;s
      default is private. This value is ignored if the repo already exists.
    *  token (str, optional) &#x2014; The token to use to commit to the repo.
      Defaults to the token saved on the machine.
    *  allow_patterns (List[str] or str, optional) &#x2014; If provided, only
      files matching at least one pattern are uploaded.
    *  ignore_patterns (List[str] or str, optional) &#x2014; If provided, files
      matching any of the patterns are not uploaded.
    *  squash_history (bool, optional) &#x2014; Whether to squash the history
      of the repo after each commit. Defaults to False. Squashing commits is
      useful to avoid degraded performances on the repo when it grows too
      large.
    *  hf_api (HfApi, optional) &#x2014; The HfApi client to use to commit to
      the Hub. Can be set with custom settings (user agent, token,&#x2026;).
Scheduler to upload a local folder to the Hub at regular intervals (e.g. push
to hub every 5 minutes).
The recommended way to use the scheduler is to use it as a context manager.
This ensures that the scheduler is properly stopped and the last commit is
triggered when the script ends. The scheduler can also be stopped manually with
the stop method. Checkout the upload_guide to learn more about how to use it.
Example:
Copied
>>> from pathlib import Path
>>> from huggingface_hub import CommitScheduler

# Scheduler uploads every 10 minutes
>>> csv_path = Path("watched_folder/data.csv")
>>> CommitScheduler(repo_id="test_scheduler", repo_type="dataset",
folder_path=csv_path.parent, every=10)

>>> with csv_path.open("a") as f:
...     f.write("first line")

# Some time later (...)
>>> with csv_path.open("a") as f:
...     f.write("second line")
Example using a context manager:
Copied
>>> from pathlib import Path
>>> from huggingface_hub import CommitScheduler

>>> with CommitScheduler(repo_id="test_scheduler", repo_type="dataset",
folder_path="watched_folder", every=10) as scheduler:
...     csv_path = Path("watched_folder/data.csv")
...     with csv_path.open("a") as f:
...         f.write("first line")
...     (...)
...     with csv_path.open("a") as f:
...         f.write("second line")

# Scheduler is now stopped and last commit have been triggered
*** push_to_hub ***
 <_source_>
( )
Push folder to the Hub and return the commit info.
This method is not meant to be called directly. It is run in the background by
the scheduler, respecting a queue mechanism to avoid concurrent commits. Making
a direct call to the method might lead to concurrency issues.
The default behavior of push_to_hub is to assume an append-only folder. It
lists all files in the folder and uploads only changed files. If no changes are
found, the method returns without committing anything. If you want to change
this behavior, you can inherit from CommitScheduler and override this method.
This can be useful for example to compress data together in a single file
before committing. For more details and examples, check out our integration
guide.
*** stop ***
 <_source_>
( )
Stop the scheduler.
A stopped scheduler cannot be restarted. Mostly for tests purposes.
*** trigger ***
 <_source_>
( )
Trigger a push_to_hub and return a future.
This method is automatically called every every minutes. You can also call it
manually to trigger a commit immediately, without waiting for the next
scheduled commit.
<_>_Update_on_GitHub
âManaging_local_and_online_repositories Downloading_filesâ
 HfApi_Client HfApi API_Dataclasses AccessRequest CommitInfo DatasetInfo
GitRefInfo GitCommitInfo GitRefs ModelInfo RepoSibling RepoFile RepoUrl
SafetensorsRepoMetadata SafetensorsFileMetadata SpaceInfo TensorInfo User
UserLikes WebhookInfo WebhookWatchedItem CommitOperation CommitScheduler

