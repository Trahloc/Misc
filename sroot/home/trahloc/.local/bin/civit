#!/bin/bash
#
# civit - CivitAI Model Downloader
#
# Purpose:
#   Downloads models from CivitAI using direct download URLs or model IDs, with intelligent
#   filename creation based on model metadata from the API.
#
# Created: March 8, 2025
#

# Set version
VERSION="1.0.0"

# Default values
OUTPUT_DIR="."
VERBOSE=false
QUIET=false
FORMAT=""
SIZE=""
FP=""
PARALLEL=false
DOWNLOAD_TOOL="aria2c"  # curl or aria2c
CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/civit"
CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/civit"
SEARCH_MODE=false
SEARCH_QUERY=""
CONNECTIONS=3         # Number of connections for multi-part download
USE_MULTI_PART=true  # Whether to use multi-part downloading

# ANSI Color codes
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# -----------------------------------------------
# Function to print usage information
# -----------------------------------------------
print_usage() {
    cat << EOF
Usage: civit [OPTIONS] URL|MODEL_ID

CivitAI model downloader that handles API authentication, redirects, and 
intelligent file naming based on model metadata.

Options:
  -o, --output DIR        Specify output directory (default: current directory)
  -f, --format FORMAT     Specify model format (SafeTensor, PickleTensor, Other)
  -s, --size SIZE         Specify model size (full, pruned)
  -p, --fp PRECISION      Specify precision (fp16, bf16)
  -v, --verbose           Enable verbose output
  -q, --quiet             Minimal output (only errors)
  -a, --aria              Use aria2c for faster downloads (if installed)
  -S, --search QUERY      Search for models by keywords
  -h, --help              Display this help message
  -V, --version           Display version information
  -c, --config            Create/edit configuration file
  -m, --multi-part        Use multi-part downloading (requires aria2c)
  -c, --connections NUM   Number of connections for multi-part download (default: 16)

Examples:
  civit "https://civitai.com/api/download/models/1448477?type=Model&format=SafeTensor"
  civit -o ~/models 1448477
  civit -f SafeTensor -s full -p bf16 1448477
  civit -S "realistic portrait"
  civit -a -m -c 32 1448477  # Download with aria2c using 32 connections

Environment:
  CIVITAPI              Set this environment variable to your CivitAI API key

Report bugs to: https://github.com/yourusername/civit/issues
EOF
}

# -----------------------------------------------
# Function to print version
# -----------------------------------------------
print_version() {
    echo "civit $VERSION"
    echo "Copyright (C) 2025"
    echo "License: MIT"
}

# -----------------------------------------------
# Function to print error and exit
# -----------------------------------------------
error() {
    echo -e "${RED}Error:${NC} $1" >&2
    exit 1
}

# -----------------------------------------------
# Function to print verbose messages
# -----------------------------------------------
log() {
    if $VERBOSE; then
        echo -e "${BLUE}INFO:${NC} $1"
    fi
}

# -----------------------------------------------
# Function to print warnings
# -----------------------------------------------
warn() {
    echo -e "${YELLOW}Warning:${NC} $1" >&2
}

# -----------------------------------------------
# Function to print success messages
# -----------------------------------------------
success() {
    echo -e "${GREEN}Success:${NC} $1"
}

# -----------------------------------------------
# Function to print messages (respects quiet mode)
# -----------------------------------------------
msg() {
    if ! $QUIET; then
        echo -e "$1"
    fi
}

# -----------------------------------------------
# Check for required dependencies
# -----------------------------------------------
check_dependencies() {
    for cmd in curl grep cut tr; do
        if ! command -v $cmd &> /dev/null; then
            error "Required command '$cmd' not found. Please install it and try again."
        fi
    done
    
    # Check for jq (optional but recommended)
    if ! command -v jq &> /dev/null; then
        warn "jq not found. Installing it is recommended for better JSON handling."
        warn "Install with: sudo apt install jq (Debian/Ubuntu) or brew install jq (macOS)"
    fi
    
    # Check for aria2c (optional)
    if [ "$DOWNLOAD_TOOL" = "aria2c" ] && ! command -v aria2c &> /dev/null; then
        warn "aria2c not found, falling back to curl."
        DOWNLOAD_TOOL="curl"
    fi
    
    # Check for aria2c (optional, but required for multi-part downloads)
    if [ "$DOWNLOAD_TOOL" = "aria2c" ] || $USE_MULTI_PART; then
        if ! command -v aria2c &> /dev/null; then
            warn "aria2c not found, falling back to curl."
            DOWNLOAD_TOOL="curl"
            USE_MULTI_PART=false
        else
            # If we're using multi-part, force aria2c
            if $USE_MULTI_PART; then
                DOWNLOAD_TOOL="aria2c"
            fi
        fi
    fi
    
    # Check for API key
    if [ -z "$CIVITAPI" ]; then
        # Try to load from config file
        if [ -f "${HOME}/.config/civit/config" ]; then
            source "${HOME}/.config/civit/config"
        fi
        
        if [ -z "$CIVITAPI" ]; then
            warn "CIVITAPI environment variable not set. Some functionality may be limited."
            warn "Set it with: export CIVITAPI=\"your_api_key\""
            warn "Or add it to ~/.config/civit/config"
        fi
    fi

    # Create cache directory if it doesn't exist
    mkdir -p "$CACHE_DIR"
}

# -----------------------------------------------
# Function to get model information using jq if available
# -----------------------------------------------
get_model_info() {
    local MODEL_ID="$1"
    local CACHE_FILE="${CACHE_DIR}/model_${MODEL_ID}.json"
    
    # Check if we have a cached version and it's less than 24 hours old
    if [ -f "$CACHE_FILE" ] && [ $(($(date +%s) - $(stat -c %Y "$CACHE_FILE"))) -lt 86400 ]; then
        log "Using cached model information"
        cat "$CACHE_FILE"
        return 0
    fi
    
    log "Fetching model information for ID: $MODEL_ID..."
    
    # Try to get model version info first (more accurate for downloads)
    if [ -n "$CIVITAPI" ]; then
        MODEL_INFO=$(curl -s -H "Authorization: Bearer $CIVITAPI" \
                      "https://civitai.com/api/v1/model-versions/$MODEL_ID")
    else
        MODEL_INFO=$(curl -s "https://civitai.com/api/v1/model-versions/$MODEL_ID")
    fi
    
    # Check if the model version API call was successful
    if [[ "$MODEL_INFO" == *"error"* || "$MODEL_INFO" == "" ]]; then
        log "Model version API failed, trying models API instead"
        # Fall back to the models API
        if [ -n "$CIVITAPI" ]; then
            MODEL_INFO=$(curl -s -H "Authorization: Bearer $CIVITAPI" \
                          "https://civitai.com/api/v1/models/$MODEL_ID")
        else
            MODEL_INFO=$(curl -s "https://civitai.com/api/v1/models/$MODEL_ID")
        fi
        
        # Check if the models API call was successful
        if [[ "$MODEL_INFO" == *"error"* ]]; then
            warn "Failed to get model information from API. Using generic name."
            MODEL_INFO="{\"name\":\"CivitAI_Model_$MODEL_ID\"}"
        fi
    fi
    
    # Cache the result
    echo "$MODEL_INFO" > "$CACHE_FILE"
    echo "$MODEL_INFO"
    return 0
}

# -----------------------------------------------
# Function to extract model name using jq if available
# -----------------------------------------------
extract_model_name() {
    local MODEL_INFO="$1"
    local MODEL_ID="$2"
    
    if command -v jq &> /dev/null; then
        # Try to extract name using jq (much more reliable than grep)
        MODEL_NAME=$(echo "$MODEL_INFO" | jq -r '.name // .model.name // empty' 2>/dev/null)
    else
        # Fallback to grep for users without jq
        MODEL_NAME=$(echo "$MODEL_INFO" | grep -o '"name":"[^"]*"' | head -1 | cut -d'"' -f4)
        
        if [ -z "$MODEL_NAME" ]; then
            # Try alternative JSON structure
            MODEL_NAME=$(echo "$MODEL_INFO" | grep -o '"model":{[^}]*"name":"[^"]*"' | grep -o '"name":"[^"]*"' | cut -d'"' -f4)
        fi
    fi
    
    if [ -z "$MODEL_NAME" ]; then
        warn "Could not extract model name from API response. Using model ID as filename."
        MODEL_NAME="civitai_model_$MODEL_ID"
    else
        # Sanitize filename
        MODEL_NAME=$(echo "$MODEL_NAME" | tr ' ' '_' | tr -cd '[:alnum:]._-')
    fi
    
    echo "$MODEL_NAME"
}

# -----------------------------------------------
# Function to download with aria2c if available
# -----------------------------------------------
download_with_tool() {
    local DOWNLOAD_URL="$1"
    local OUTPUT_PATH="$2"
    local RESUME="$3"
    
    if [ "$DOWNLOAD_TOOL" = "aria2c" ] && command -v aria2c &> /dev/null; then
        log "Using aria2c for download"
        
        local ARIA_ARGS=(
            --max-connection-per-server=16
            --min-split-size=1M
            --split=16
            --max-tries=10
            --retry-wait=5
            --connect-timeout=30
            --timeout=30
            --auto-file-renaming=false
            --allow-overwrite=false
        )
        
        # For multi-part downloads, configure the connections
        if $USE_MULTI_PART; then
            log "Using multi-part download with $CONNECTIONS connections"
            ARIA_ARGS+=(
                --max-connection-per-server=$CONNECTIONS
                --min-split-size=1M
                --split=$CONNECTIONS
                --max-concurrent-downloads=1
            )
        else
            # Default settings for normal aria2c download
            ARIA_ARGS+=(
                --max-connection-per-server=4
                --split=4
            )
        fi
        
        if [ -n "$CIVITAPI" ]; then
            ARIA_ARGS+=("--header=Authorization: Bearer $CIVITAPI")
        fi
        
        if $VERBOSE; then
            ARIA_ARGS+=(--console-log-level=info)
        else
            ARIA_ARGS+=(--console-log-level=warn)
        fi
        
        # If resume is requested and file exists
        if [ "$RESUME" = "true" ] && [ -f "$OUTPUT_PATH" ]; then
            ARIA_ARGS+=(--continue=true)
        fi
        
        ARIA_ARGS+=(-d "$(dirname "$OUTPUT_PATH")" -o "$(basename "$OUTPUT_PATH")" "$DOWNLOAD_URL")
        
        aria2c "${ARIA_ARGS[@]}"
        return $?
    else
        local CURL_ARGS=(
            --location
            --retry 10
            --retry-delay 5
            --connect-timeout 30
            --max-time 14400
            --compressed
        )
        
        if [ -n "$CIVITAPI" ]; then
            CURL_ARGS+=(-H "Authorization: Bearer $CIVITAPI")
        fi
        
        if ! $VERBOSE; then
            CURL_ARGS+=(--progress-bar)
        else
            CURL_ARGS+=(-v)
        fi
        
        # If resume is requested and file exists
        if [ "$RESUME" = "true" ] && [ -f "$OUTPUT_PATH" ]; then
            CURL_ARGS+=(-C -)
        fi
        
        CURL_ARGS+=(-o "$OUTPUT_PATH")
        CURL_ARGS+=("$DOWNLOAD_URL")
        
        curl "${CURL_ARGS[@]}"
        return $?
    fi
}

# -----------------------------------------------
# Parse command-line arguments
# -----------------------------------------------
parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                print_usage
                exit 0
                ;;
            -V|--version)
                print_version
                exit 0
                ;;
            -v|--verbose)
                VERBOSE=true
                shift
                ;;
            -q|--quiet)
                QUIET=true
                # Make sure verbose and quiet aren't used together
                if $VERBOSE; then
                    warn "Both --verbose and --quiet specified. Using --quiet."
                    VERBOSE=false
                fi
                shift
                ;;
            -o|--output)
                if [[ -n "$2" && "$2" != -* ]]; then
                    OUTPUT_DIR="$2"
                    shift 2
                else
                    error "Argument for $1 is missing"
                fi
                ;;
            -f|--format)
                if [[ -n "$2" && "$2" != -* ]]; then
                    # Validate format
                    case "${2,,}" in
                        safetensor|safetensors)
                            FORMAT="SafeTensor"
                            ;;
                        pickletensor|pickle|ckpt)
                            FORMAT="PickleTensor"
                            ;;
                        other|pt)
                            FORMAT="Other"
                            ;;
                        *)
                            warn "Invalid format: $2. Using default (SafeTensor)."
                            FORMAT="SafeTensor"
                            ;;
                    esac
                    shift 2
                else
                    error "Argument for $1 is missing"
                fi
                ;;
            -s|--size)
                if [[ -n "$2" && "$2" != -* ]]; then
                    # Validate size
                    case "${2,,}" in
                        full|pruned)
                            SIZE="$2"
                            ;;
                        *)
                            warn "Invalid size: $2. Valid options are 'full' or 'pruned'."
                            SIZE="full"
                            ;;
                    esac
                    shift 2
                else
                    error "Argument for $1 is missing"
                fi
                ;;
            -p|--fp)
                if [[ -n "$2" && "$2" != -* ]]; then
                    # Validate precision
                    case "${2,,}" in
                        fp16|fp32|bf16)
                            FP="$2"
                            ;;
                        *)
                            warn "Invalid precision: $2. Valid options are 'fp16', 'fp32', or 'bf16'."
                            FP="fp16"
                            ;;
                    esac
                    shift 2
                else
                    error "Argument for $1 is missing"
                fi
                ;;
            -a|--aria)
                DOWNLOAD_TOOL="aria2c"
                shift
                ;;
            -S|--search)
                if [[ -n "$2" && "$2" != -* ]]; then
                    SEARCH_MODE=true
                    SEARCH_QUERY="$2"
                    shift 2
                else
                    error "Argument for $1 is missing"
                fi
                ;;
            -c|--config)
                setup_config
                exit 0
                ;;
            --parallel)
                PARALLEL=true
                warn "Parallel download feature is experimental."
                shift
                ;;
            -m|--multi-part)
                USE_MULTI_PART=true
                shift
                ;;
            -c|--connections)
                if [[ -n "$2" && "$2" != -* ]]; then
                    CONNECTIONS="$2"
                    shift 2
                else
                    error "Argument for $1 is missing"
                fi
                ;;
            -*)
                error "Unknown option: $1"
                ;;
            *)
                # The last non-option argument is the URL or model ID
                URL="$1"
                shift
                ;;
        esac
    done
    
    # Check that a URL or model ID was provided or search mode is enabled
    if [ -z "$URL" ] && ! $SEARCH_MODE; then
        error "No URL or model ID provided. Use --help for usage information."
    fi
    
    # Load default values from config if they exist and if not overridden
    if [ -f "${CONFIG_DIR}/config" ]; then
        source "${CONFIG_DIR}/config"
        
        # Apply defaults if not specified by user
        if [ -n "$DEFAULT_OUTPUT_DIR" ] && [ "$OUTPUT_DIR" = "." ]; then
            OUTPUT_DIR="$DEFAULT_OUTPUT_DIR"
            # Expand any variables in the path
            OUTPUT_DIR=$(eval echo "$OUTPUT_DIR")
        fi
        
        if [ -n "$DEFAULT_DOWNLOAD_TOOL" ] && [ "$DOWNLOAD_TOOL" = "curl" ]; then
            DOWNLOAD_TOOL="$DEFAULT_DOWNLOAD_TOOL"
        fi
        
        if [ -n "$DEFAULT_FORMAT" ] && [ -z "$FORMAT" ]; then
            FORMAT="$DEFAULT_FORMAT"
        fi
        
        if [ -n "$DEFAULT_SIZE" ] && [ -z "$SIZE" ]; then
            SIZE="$DEFAULT_SIZE"
        fi
        
        if [ -n "$DEFAULT_FP" ] && [ -z "$FP" ]; then
            FP="$DEFAULT_FP"
        fi
    fi
}

# -----------------------------------------------
# Function to setup or edit the configuration file
# -----------------------------------------------
setup_config() {
    # Create config directory if it doesn't exist
    mkdir -p "$CONFIG_DIR"
    
    CONFIG_FILE="${CONFIG_DIR}/config"
    
    # Create a default config file if it doesn't exist
    if [ ! -f "$CONFIG_FILE" ]; then
        cat > "$CONFIG_FILE" << EOF
# CivitAI Downloader Configuration

# Your CivitAI API key
# Get it from: https://civitai.com/user/account
CIVITAPI=""

# Default download directory
DEFAULT_OUTPUT_DIR="\$HOME/Downloads/civitai"

# Default download tool: curl or aria2c
DEFAULT_DOWNLOAD_TOOL="curl"

# Default format: SafeTensor, PickleTensor, Other
DEFAULT_FORMAT="SafeTensor"

# Default model size: full, pruned
DEFAULT_SIZE="full"

# Default precision: fp16, bf16
DEFAULT_FP="fp16"

# Default number of connections for multi-part downloads
DEFAULT_CONNECTIONS=16
EOF
        echo "Created default configuration file at: $CONFIG_FILE"
    fi
    
    # Open in the default editor
    if [ -n "$EDITOR" ]; then
        $EDITOR "$CONFIG_FILE"
    elif command -v nano &> /dev/null; then
        nano "$CONFIG_FILE"
    elif command -v vim &> /dev/null; then
        vim "$CONFIG_FILE"
    else
        echo "Configuration file created at: $CONFIG_FILE"
        echo "Edit this file manually to set your preferences."
    fi
    
    echo "Configuration updated. Changes will apply to future downloads."
    exit 0
}

# -----------------------------------------------
# Function to get file size before download
# -----------------------------------------------
get_remote_file_size() {
    local URL="$1"
    local SIZE=""
    
    # Try to get the Content-Length header
    if [ -n "$CIVITAPI" ]; then
        SIZE=$(curl -sI -H "Authorization: Bearer $CIVITAPI" "$URL" | grep -i Content-Length | awk '{print $2}' | tr -d '\r')
    else
        SIZE=$(curl -sI "$URL" | grep -i Content-Length | awk '{print $2}' | tr -d '\r')
    fi
    
    # Format size in human-readable format if we got a number
    if [[ "$SIZE" =~ ^[0-9]+$ ]]; then
        if [ "$SIZE" -lt 1024 ]; then
            echo "${SIZE} B"
        elif [ "$SIZE" -lt 1048576 ]; then
            echo "$(( SIZE / 1024 )) KB"
        elif [ "$SIZE" -lt 1073741824 ]; then
            echo "$(( SIZE / 1048576 )) MB"
        else
            echo "$(( SIZE / 1073741824 )) GB"
        fi
    else
        echo "Unknown"
    fi
}

# -----------------------------------------------
# Download a model from CivitAI
# -----------------------------------------------
download_model() {
    local URL="$1"
    local OUTPUT_DIR="$2"
    
    # Ensure output directory exists
    mkdir -p "$OUTPUT_DIR"
    
    # Determine if input is a URL or a model ID
    if [[ "$URL" =~ ^[0-9]+$ ]]; then
        log "Input appears to be a model ID: $URL"
        MODEL_ID="$URL"
        
        # Construct query params from options
        QUERY_PARAMS="?type=Model"
        if [ -n "$FORMAT" ]; then
            QUERY_PARAMS="${QUERY_PARAMS}&format=${FORMAT}"
        fi
        if [ -n "$SIZE" ]; then
            QUERY_PARAMS="${QUERY_PARAMS}&size=${SIZE}"
        fi
        if [ -n "$FP" ]; then
            QUERY_PARAMS="${QUERY_PARAMS}&fp=${FP}"
        fi
    else
        log "Input appears to be a URL: $URL"
        # Extract model ID from URL
        MODEL_ID=$(echo "$URL" | grep -o 'models/[0-9]*' | cut -d'/' -f2)
        
        if [ -z "$MODEL_ID" ]; then
            error "Could not extract model ID from URL"
        fi
        
        # Extract query parameters
        QUERY_PARAMS=$(echo "$URL" | grep -o '[?].*$' || echo "?type=Model") # Only add parameter from CLI if it's not already present in URL

        # Check if format is missing in URL
        if [ -n "$FORMAT" ] && [[ ! "$QUERY_PARAMS" =~ [\?\&]format= ]]; then
            QUERY_PARAMS="${QUERY_PARAMS}&format=${FORMAT}"
        fi
        
        # Check if size is missing in URL
        if [ -n "$SIZE" ] && [[ ! "$QUERY_PARAMS" =~ [\?\&]size= ]]; then
            QUERY_PARAMS="${QUERY_PARAMS}&size=${SIZE}"
        fi
        
        # Check if precision is missing in URL
        if [ -n "$FP" ] && [[ ! "$QUERY_PARAMS" =~ [\?\&]fp= ]]; then
            QUERY_PARAMS="${QUERY_PARAMS}&fp=${FP}"
        fi

        # Make sure type parameter is included
        if [[ ! "$QUERY_PARAMS" =~ [\?\&]type= ]]; then
            QUERY_PARAMS="${QUERY_PARAMS}&type=Model"
        fi
    fi
    
    log "Model ID: $MODEL_ID"
    log "Query parameters: $QUERY_PARAMS"
    
    # First, query the API to get the model name for better filename
    MODEL_INFO=$(get_model_info "$MODEL_ID")
    
    # Extract model name and sanitize it for filename use
    MODEL_NAME=$(extract_model_name "$MODEL_INFO" "$MODEL_ID")
    
    log "Model name: $MODEL_NAME"
    
    # Get the hash from the model info if possible (using jq)
    MODEL_HASH=""
    if command -v jq &> /dev/null; then
        # Try to extract hash from different JSON structures
        MODEL_HASH=$(echo "$MODEL_INFO" | jq -r '.files[0].hashes.SHA256 // .files[0].hashes.CRC32 // empty' 2>/dev/null)
    fi
    
    # Determine file extension from URL or default to safetensors
    EXTENSION="safetensors"
    if [[ "$QUERY_PARAMS" == *"format="* ]]; then
        FORMAT_PARAM=$(echo "$QUERY_PARAMS" | grep -o 'format=[^&]*' | cut -d'=' -f2)
        if [ "$FORMAT_PARAM" = "PickleTensor" ]; then
            EXTENSION="ckpt"
        elif [ "$FORMAT_PARAM" = "Other" ]; then
            EXTENSION="pt"
        fi
    fi
    
    FILENAME="${MODEL_NAME}_${MODEL_ID}.${EXTENSION}"
    
    # Check if file already exists
    if [ -f "${OUTPUT_DIR}/${FILENAME}" ]; then
        log "File ${OUTPUT_DIR}/${FILENAME} already exists. Checking integrity..."
        
        # If we have a hash and the file exists, verify it
        if [ -n "$MODEL_HASH" ] && command -v sha256sum &> /dev/null; then
            EXISTING_HASH=$(sha256sum "${OUTPUT_DIR}/${FILENAME}" | cut -d' ' -f1)
            if [ "$EXISTING_HASH" = "$MODEL_HASH" ]; then
                msg "File already exists and hash matches. Skipping download."
                success "File verified: ${OUTPUT_DIR}/${FILENAME}"
                return 0
            else
                warn "File exists but hash doesn't match. Resuming download..."
                RESUME="true"
            fi
        else
            # If we can't verify, ask if we should resume
            if ! $QUIET; then
                read -p "File exists. Resume download? (Y/n): " RESUME_CHOICE
                if [[ "$RESUME_CHOICE" =~ ^[Nn]$ ]]; then
                    error "Download aborted by user."
                fi
            fi
            RESUME="true"
        fi
    else
        RESUME="false"
    fi
    
    # Download with progress bar, API key auth, and proper naming
    DOWNLOAD_URL="https://civitai.com/api/download/models/${MODEL_ID}${QUERY_PARAMS}"
    log "Download URL: $DOWNLOAD_URL"
    
    # Get file size before download
    if ! $QUIET; then
        REMOTE_SIZE=$(get_remote_file_size "$DOWNLOAD_URL")
        echo "File size: $REMOTE_SIZE"
    fi
    
    msg "Downloading model: $MODEL_NAME (ID: $MODEL_ID)"
    log "Output filename: $FILENAME"
    log "Output directory: $OUTPUT_DIR"
    
    # Start the download
    download_with_tool "$DOWNLOAD_URL" "${OUTPUT_DIR}/${FILENAME}" "$RESUME"
    
    local EXIT_CODE=$?
    
    if [ $EXIT_CODE -eq 0 ]; then
        # Verify file integrity
        if [ -s "${OUTPUT_DIR}/${FILENAME}" ]; then
            FILE_SIZE=$(du -h "${OUTPUT_DIR}/${FILENAME}" | cut -f1)
            success "Download complete: ${OUTPUT_DIR}/${FILENAME} (Size: $FILE_SIZE)"
            
            # Verify checksum if we have one
            if [ -n "$MODEL_HASH" ] && command -v sha256sum &> /dev/null; then
                msg "Verifying file integrity..."
                DOWNLOADED_HASH=$(sha256sum "${OUTPUT_DIR}/${FILENAME}" | cut -d' ' -f1)
                if [ "$DOWNLOADED_HASH" = "$MODEL_HASH" ]; then
                    success "Checksum verification passed!"
                else
                    warn "Checksum verification failed! Expected: $MODEL_HASH, Got: $DOWNLOADED_HASH"
                    warn "The model may be corrupted or different from what was expected."
                fi
            fi
            return 0
        else
            error "Downloaded file has zero size, download failed."
        fi
    else
        error "Download failed with exit code $EXIT_CODE"
    fi
}

# -----------------------------------------------
# Main program
# -----------------------------------------------
main() {
    # Check for dependencies
    check_dependencies
    
    # Parse command-line arguments
    parse_arguments "$@"
    
    # Download model (no search functionality as requested)
    download_model "$URL" "$OUTPUT_DIR"
}

# Execute main function with all arguments
main "$@"
